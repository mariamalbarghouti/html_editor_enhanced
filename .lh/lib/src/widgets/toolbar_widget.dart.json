{
    "sourceFile": "lib/src/widgets/toolbar_widget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1720995003526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1720995003526,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\n\r\nimport 'package:file_picker/file_picker.dart';\r\nimport 'package:flex_color_picker/flex_color_picker.dart';\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:html_editor_enhanced/html_editor.dart';\r\nimport 'package:html_editor_enhanced/utils/utils.dart';\r\nimport 'package:numberpicker/numberpicker.dart';\r\nimport 'package:pointer_interceptor/pointer_interceptor.dart';\r\n\r\n/// Toolbar widget class\r\nclass ToolbarWidget extends StatefulWidget {\r\n  /// The [HtmlEditorController] is mainly used to call the [execCommand] method\r\n  final HtmlEditorController controller;\r\n  final HtmlToolbarOptions htmlToolbarOptions;\r\n  final Callbacks? callbacks;\r\n\r\n  const ToolbarWidget({\r\n    Key? key,\r\n    required this.controller,\r\n    required this.htmlToolbarOptions,\r\n    required this.callbacks,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<StatefulWidget> createState() {\r\n    return ToolbarWidgetState();\r\n  }\r\n}\r\n\r\n/// Toolbar widget state\r\nclass ToolbarWidgetState extends State<ToolbarWidget> {\r\n  /// List that controls which [ToggleButtons] are selected for\r\n  /// bold/italic/underline/clear styles\r\n  List<bool> _fontSelected = List<bool>.filled(4, false);\r\n\r\n  /// List that controls which [ToggleButtons] are selected for\r\n  /// strikthrough/superscript/subscript\r\n  List<bool> _miscFontSelected = List<bool>.filled(3, false);\r\n\r\n  /// List that controls which [ToggleButtons] are selected for\r\n  /// forecolor/backcolor\r\n  List<bool> _colorSelected = List<bool>.filled(2, false);\r\n\r\n  /// List that controls which [ToggleButtons] are selected for\r\n  /// ordered/unordered list\r\n  List<bool> _listSelected = List<bool>.filled(2, false);\r\n\r\n  /// List that controls which [ToggleButtons] are selected for\r\n  /// fullscreen, codeview, undo, redo, and help. Fullscreen and codeview\r\n  /// are the only buttons that will ever be selected.\r\n  List<bool> _miscSelected = List<bool>.filled(5, false);\r\n\r\n  /// List that controls which [ToggleButtons] are selected for\r\n  /// justify left/right/center/full.\r\n  List<bool> _alignSelected = List<bool>.filled(4, false);\r\n\r\n  List<bool> _textDirectionSelected = List<bool>.filled(2, false);\r\n\r\n  /// Sets the selected item for the font style dropdown\r\n  String _fontSelectedItem = 'p';\r\n\r\n  String _fontNameSelectedItem = 'sans-serif';\r\n\r\n  /// Sets the selected item for the font size dropdown\r\n  double _fontSizeSelectedItem = 3;\r\n\r\n  /// Keeps track of the current font size in px\r\n  double _actualFontSizeSelectedItem = 16;\r\n\r\n  /// Sets the selected item for the font units dropdown\r\n  String _fontSizeUnitSelectedItem = 'pt';\r\n\r\n  /// Sets the selected item for the foreground color dialog\r\n  Color _foreColorSelected = Colors.black;\r\n\r\n  /// Sets the selected item for the background color dialog\r\n  Color _backColorSelected = Colors.yellow;\r\n\r\n  /// Sets the selected item for the list style dropdown\r\n  String? _listStyleSelectedItem;\r\n\r\n  /// Sets the selected item for the line height dropdown\r\n  double _lineHeightSelectedItem = 1;\r\n\r\n  /// Masks the toolbar with a grey color if false\r\n  bool _enabled = true;\r\n\r\n  /// Tracks the expanded status of the toolbar\r\n  bool _isExpanded = false;\r\n\r\n  @override\r\n  void initState() {\r\n    widget.controller.toolbar = this;\r\n    _isExpanded = widget.htmlToolbarOptions.initiallyExpanded;\r\n    for (var t in widget.htmlToolbarOptions.defaultToolbarButtons) {\r\n      if (t is FontButtons) {\r\n        _fontSelected = List<bool>.filled(t.getIcons1().length, false);\r\n        _miscFontSelected = List<bool>.filled(t.getIcons2().length, false);\r\n      }\r\n      if (t is ColorButtons) {\r\n        _colorSelected = List<bool>.filled(t.getIcons().length, false);\r\n      }\r\n      if (t is ListButtons) {\r\n        _listSelected = List<bool>.filled(t.getIcons().length, false);\r\n      }\r\n      if (t is OtherButtons) {\r\n        _miscSelected = List<bool>.filled(t.getIcons1().length, false);\r\n      }\r\n      if (t is ParagraphButtons) {\r\n        _alignSelected = List<bool>.filled(t.getIcons1().length, false);\r\n      }\r\n    }\r\n    super.initState();\r\n  }\r\n\r\n  void disable() {\r\n    setState(mounted, this.setState, () {\r\n      _enabled = false;\r\n    });\r\n  }\r\n\r\n  void enable() {\r\n    setState(mounted, this.setState, () {\r\n      _enabled = true;\r\n    });\r\n  }\r\n\r\n  /// Updates the toolbar from the JS handler on mobile and the onMessage\r\n  /// listener on web\r\n  void updateToolbar(Map<String, dynamic> json) {\r\n    //get parent element\r\n    String parentElem = json['style'] ?? '';\r\n    //get font name\r\n    var fontName = (json['fontName'] ?? '').toString().replaceAll('\"', '');\r\n    //get font size\r\n    var fontSize = double.tryParse(json['fontSize']) ?? 3;\r\n    //get bold/underline/italic status\r\n    var fontList = (json['font'] as List<dynamic>).cast<bool?>();\r\n    //get superscript/subscript/strikethrough status\r\n    var miscFontList = (json['miscFont'] as List<dynamic>).cast<bool?>();\r\n    //get forecolor/backcolor\r\n    var colorList = (json['color'] as List<dynamic>).cast<String?>();\r\n    //get ordered/unordered list status\r\n    var paragraphList = (json['paragraph'] as List<dynamic>).cast<bool?>();\r\n    //get justify status\r\n    var alignList = (json['align'] as List<dynamic>).cast<bool?>();\r\n    //get line height\r\n    String lineHeight = json['lineHeight'] ?? '';\r\n    //get list icon type\r\n    String listType = json['listStyle'] ?? '';\r\n    //get text direction\r\n    String textDir = json['direction'] ?? 'ltr';\r\n    //check the parent element if it matches one of the predetermined styles and update the toolbar\r\n    if (['pre', 'blockquote', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6']\r\n        .contains(parentElem)) {\r\n      setState(mounted, this.setState, () {\r\n        _fontSelectedItem = parentElem;\r\n      });\r\n    } else {\r\n      setState(mounted, this.setState, () {\r\n        _fontSelectedItem = 'p';\r\n      });\r\n    }\r\n    //check the font name if it matches one of the predetermined fonts and update the toolbar\r\n    if (['Courier New', 'sans-serif', 'Times New Roman'].contains(fontName)) {\r\n      setState(mounted, this.setState, () {\r\n        _fontNameSelectedItem = fontName;\r\n      });\r\n    } else {\r\n      setState(mounted, this.setState, () {\r\n        _fontNameSelectedItem = 'sans-serif';\r\n      });\r\n    }\r\n    //update the fore/back selected color if necessary\r\n    if (colorList[0] != null && colorList[0]!.isNotEmpty) {\r\n      setState(mounted, this.setState, () {\r\n        var rgb = colorList[0]!.replaceAll('rgb(', '').replaceAll(')', '');\r\n        var rgbList = rgb.split(', ');\r\n        _foreColorSelected = Color.fromRGBO(int.parse(rgbList[0]),\r\n            int.parse(rgbList[1]), int.parse(rgbList[2]), 1);\r\n      });\r\n    } else {\r\n      setState(mounted, this.setState, () {\r\n        _foreColorSelected = Colors.black;\r\n      });\r\n    }\r\n    if (colorList[1] != null && colorList[1]!.isNotEmpty) {\r\n      setState(mounted, this.setState, () {\r\n        _backColorSelected =\r\n            Color(int.parse(colorList[1]!, radix: 16) + 0xFF000000);\r\n      });\r\n    } else {\r\n      setState(mounted, this.setState, () {\r\n        _backColorSelected = Colors.yellow;\r\n      });\r\n    }\r\n    //check the list style if it matches one of the predetermined styles and update the toolbar\r\n    if ([\r\n      'decimal',\r\n      'lower-alpha',\r\n      'upper-alpha',\r\n      'lower-roman',\r\n      'upper-roman',\r\n      'disc',\r\n      'circle',\r\n      'square'\r\n    ].contains(listType)) {\r\n      setState(mounted, this.setState, () {\r\n        _listStyleSelectedItem = listType;\r\n      });\r\n    } else {\r\n      _listStyleSelectedItem = null;\r\n    }\r\n    //update the lineheight selected item if necessary\r\n    if (lineHeight.isNotEmpty && lineHeight.endsWith('px')) {\r\n      var lineHeightDouble =\r\n          double.tryParse(lineHeight.replaceAll('px', '')) ?? 16;\r\n      var lineHeights = <double>[1, 1.2, 1.4, 1.5, 1.6, 1.8, 2, 3];\r\n      lineHeights =\r\n          lineHeights.map((e) => e * _actualFontSizeSelectedItem).toList();\r\n      if (lineHeights.contains(lineHeightDouble)) {\r\n        setState(mounted, this.setState, () {\r\n          _lineHeightSelectedItem =\r\n              lineHeightDouble / _actualFontSizeSelectedItem;\r\n        });\r\n      }\r\n    } else if (lineHeight == 'normal') {\r\n      setState(mounted, this.setState, () {\r\n        _lineHeightSelectedItem = 1.0;\r\n      });\r\n    }\r\n    //check if the font size matches one of the predetermined sizes and update the toolbar\r\n    if ([1, 2, 3, 4, 5, 6, 7].contains(fontSize)) {\r\n      setState(mounted, this.setState, () {\r\n        _fontSizeSelectedItem = fontSize;\r\n      });\r\n    }\r\n    if (textDir == 'ltr') {\r\n      setState(mounted, this.setState, () {\r\n        _textDirectionSelected = [true, false];\r\n      });\r\n    } else if (textDir == 'rtl') {\r\n      setState(mounted, this.setState, () {\r\n        _textDirectionSelected = [false, true];\r\n      });\r\n    }\r\n    //use the remaining bool lists to update the selected items accordingly\r\n    setState(mounted, this.setState, () {\r\n      for (var t in widget.htmlToolbarOptions.defaultToolbarButtons) {\r\n        if (t is FontButtons) {\r\n          for (var i = 0; i < _fontSelected.length; i++) {\r\n            if (t.getIcons1()[i].icon == Icons.format_bold) {\r\n              _fontSelected[i] = fontList[0] ?? false;\r\n            }\r\n            if (t.getIcons1()[i].icon == Icons.format_italic) {\r\n              _fontSelected[i] = fontList[1] ?? false;\r\n            }\r\n            if (t.getIcons1()[i].icon == Icons.format_underline) {\r\n              _fontSelected[i] = fontList[2] ?? false;\r\n            }\r\n          }\r\n          for (var i = 0; i < _miscFontSelected.length; i++) {\r\n            if (t.getIcons2()[i].icon == Icons.format_strikethrough) {\r\n              _miscFontSelected[i] = miscFontList[0] ?? false;\r\n            }\r\n            if (t.getIcons2()[i].icon == Icons.superscript) {\r\n              _miscFontSelected[i] = miscFontList[1] ?? false;\r\n            }\r\n            if (t.getIcons2()[i].icon == Icons.subscript) {\r\n              _miscFontSelected[i] = miscFontList[2] ?? false;\r\n            }\r\n          }\r\n        }\r\n        if (t is ListButtons) {\r\n          for (var i = 0; i < _listSelected.length; i++) {\r\n            if (t.getIcons()[i].icon == Icons.format_list_bulleted) {\r\n              _listSelected[i] = paragraphList[0] ?? false;\r\n            }\r\n            if (t.getIcons()[i].icon == Icons.format_list_numbered) {\r\n              _listSelected[i] = paragraphList[1] ?? false;\r\n            }\r\n          }\r\n        }\r\n        if (t is ParagraphButtons) {\r\n          for (var i = 0; i < _alignSelected.length; i++) {\r\n            if (t.getIcons1()[i].icon == Icons.format_align_left) {\r\n              _alignSelected[i] = alignList[0] ?? false;\r\n            }\r\n            if (t.getIcons1()[i].icon == Icons.format_align_center) {\r\n              _alignSelected[i] = alignList[1] ?? false;\r\n            }\r\n            if (t.getIcons1()[i].icon == Icons.format_align_right) {\r\n              _alignSelected[i] = alignList[2] ?? false;\r\n            }\r\n            if (t.getIcons1()[i].icon == Icons.format_align_justify) {\r\n              _alignSelected[i] = alignList[3] ?? false;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    if (widget.callbacks?.onChangeSelection != null) {\r\n      widget.callbacks!.onChangeSelection!.call(EditorSettings(\r\n          parentElement: parentElem,\r\n          fontName: fontName,\r\n          fontSize: fontSize,\r\n          isBold: fontList[0] ?? false,\r\n          isItalic: fontList[1] ?? false,\r\n          isUnderline: fontList[2] ?? false,\r\n          isStrikethrough: miscFontList[0] ?? false,\r\n          isSuperscript: miscFontList[1] ?? false,\r\n          isSubscript: miscFontList[2] ?? false,\r\n          foregroundColor: _foreColorSelected,\r\n          backgroundColor: _backColorSelected,\r\n          isUl: paragraphList[0] ?? false,\r\n          isOl: paragraphList[1] ?? false,\r\n          isAlignLeft: alignList[0] ?? false,\r\n          isAlignCenter: alignList[1] ?? false,\r\n          isAlignRight: alignList[2] ?? false,\r\n          isAlignJustify: alignList[3] ?? false,\r\n          lineHeight: _lineHeightSelectedItem,\r\n          textDirection:\r\n              textDir == 'rtl' ? TextDirection.rtl : TextDirection.ltr));\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    if (widget.htmlToolbarOptions.toolbarType == ToolbarType.nativeGrid) {\r\n      return PointerInterceptor(\r\n        child: AbsorbPointer(\r\n          absorbing: !_enabled,\r\n          child: Opacity(\r\n            opacity: _enabled ? 1 : 0.5,\r\n            child: Padding(\r\n              padding: const EdgeInsets.all(5.0),\r\n              child: Wrap(\r\n                runSpacing: widget.htmlToolbarOptions.gridViewVerticalSpacing,\r\n                spacing: widget.htmlToolbarOptions.gridViewHorizontalSpacing,\r\n                children: _buildChildren(),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      );\r\n    } else if (widget.htmlToolbarOptions.toolbarType ==\r\n        ToolbarType.nativeScrollable) {\r\n      return PointerInterceptor(\r\n        child: AbsorbPointer(\r\n          absorbing: !_enabled,\r\n          child: Opacity(\r\n            opacity: _enabled ? 1 : 0.5,\r\n            child: Container(\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight + 15,\r\n              child: Padding(\r\n                padding: const EdgeInsets.all(5.0),\r\n                child: CustomScrollView(\r\n                  scrollDirection: Axis.horizontal,\r\n                  slivers: [\r\n                    SliverFillRemaining(\r\n                      hasScrollBody: false,\r\n                      child: Row(\r\n                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                        children: _buildChildren(),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      );\r\n    } else if (widget.htmlToolbarOptions.toolbarType ==\r\n        ToolbarType.nativeExpandable) {\r\n      return PointerInterceptor(\r\n        child: AbsorbPointer(\r\n          absorbing: !_enabled,\r\n          child: Opacity(\r\n            opacity: _enabled ? 1 : 0.5,\r\n            child: Container(\r\n              constraints: BoxConstraints(\r\n                maxHeight: _isExpanded\r\n                    ? MediaQuery.of(context).size.height\r\n                    : widget.htmlToolbarOptions.toolbarItemHeight + 15,\r\n              ),\r\n              child: _isExpanded\r\n                  ? Padding(\r\n                      padding: const EdgeInsets.all(5.0),\r\n                      child: Wrap(\r\n                        runSpacing:\r\n                            widget.htmlToolbarOptions.gridViewVerticalSpacing,\r\n                        spacing:\r\n                            widget.htmlToolbarOptions.gridViewHorizontalSpacing,\r\n                        children: _buildChildren()\r\n                          ..insert(\r\n                              0,\r\n                              Container(\r\n                                height:\r\n                                    widget.htmlToolbarOptions.toolbarItemHeight,\r\n                                child: IconButton(\r\n                                  icon: Icon(\r\n                                    _isExpanded\r\n                                        ? Icons.expand_less\r\n                                        : Icons.expand_more,\r\n                                    color: Colors.grey,\r\n                                  ),\r\n                                  onPressed: () async {\r\n                                    setState(mounted, this.setState, () {\r\n                                      _isExpanded = !_isExpanded;\r\n                                    });\r\n                                    await Future.delayed(\r\n                                        Duration(milliseconds: 100));\r\n                                    if (kIsWeb) {\r\n                                      widget.controller.recalculateHeight();\r\n                                    } else {\r\n                                      await widget.controller.editorController!\r\n                                          .evaluateJavascript(\r\n                                              source:\r\n                                                  \"var height = \\$('div.note-editable').outerHeight(true); window.flutter_inappwebview.callHandler('setHeight', height);\");\r\n                                    }\r\n                                  },\r\n                                ),\r\n                              )),\r\n                      ),\r\n                    )\r\n                  : Padding(\r\n                      padding: const EdgeInsets.all(5.0),\r\n                      child: CustomScrollView(\r\n                        scrollDirection: Axis.horizontal,\r\n                        shrinkWrap: true,\r\n                        slivers: [\r\n                          SliverPersistentHeader(\r\n                            pinned: true,\r\n                            delegate: ExpandIconDelegate(\r\n                                widget.htmlToolbarOptions.toolbarItemHeight,\r\n                                _isExpanded, () async {\r\n                              setState(mounted, this.setState, () {\r\n                                _isExpanded = !_isExpanded;\r\n                              });\r\n                              await Future.delayed(Duration(milliseconds: 100));\r\n                              if (kIsWeb) {\r\n                                widget.controller.recalculateHeight();\r\n                              } else {\r\n                                await widget.controller.editorController!\r\n                                    .evaluateJavascript(\r\n                                        source:\r\n                                            \"var height = \\$('div.note-editable').outerHeight(true); window.flutter_inappwebview.callHandler('setHeight', height);\");\r\n                              }\r\n                            }),\r\n                          ),\r\n                          SliverFillRemaining(\r\n                            hasScrollBody: false,\r\n                            child: Row(\r\n                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                              children: _buildChildren(),\r\n                            ),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n            ),\r\n          ),\r\n        ),\r\n      );\r\n    }\r\n    return Container(height: 0, width: 0);\r\n  }\r\n\r\n  List<Widget> _buildChildren() {\r\n    var toolbarChildren = <Widget>[];\r\n    for (var t in widget.htmlToolbarOptions.defaultToolbarButtons) {\r\n      if (t is StyleButtons && t.style) {\r\n        toolbarChildren.add(Container(\r\n          padding: const EdgeInsets.only(left: 8.0),\r\n          height: widget.htmlToolbarOptions.toolbarItemHeight,\r\n          decoration: !widget.htmlToolbarOptions.renderBorder\r\n              ? null\r\n              : widget.htmlToolbarOptions.dropdownBoxDecoration ??\r\n                  BoxDecoration(\r\n                      color: Theme.of(context).scaffoldBackgroundColor,\r\n                      border: Border.all(\r\n                          color: Theme.of(context)\r\n                              .colorScheme\r\n                              .onSurface\r\n                              .withOpacity(0.12))),\r\n          child: CustomDropdownButtonHideUnderline(\r\n            child: CustomDropdownButton<String>(\r\n              elevation: widget.htmlToolbarOptions.dropdownElevation,\r\n              icon: widget.htmlToolbarOptions.dropdownIcon,\r\n              iconEnabledColor: widget.htmlToolbarOptions.dropdownIconColor,\r\n              iconSize: widget.htmlToolbarOptions.dropdownIconSize,\r\n              itemHeight: widget.htmlToolbarOptions.dropdownItemHeight,\r\n              focusColor: widget.htmlToolbarOptions.dropdownFocusColor,\r\n              dropdownColor: widget.htmlToolbarOptions.dropdownBackgroundColor,\r\n              menuDirection: widget.htmlToolbarOptions.dropdownMenuDirection ??\r\n                  (widget.htmlToolbarOptions.toolbarPosition ==\r\n                          ToolbarPosition.belowEditor\r\n                      ? DropdownMenuDirection.up\r\n                      : DropdownMenuDirection.down),\r\n              menuMaxHeight: widget.htmlToolbarOptions.dropdownMenuMaxHeight ??\r\n                  MediaQuery.of(context).size.height / 3,\r\n              style: widget.htmlToolbarOptions.textStyle,\r\n              items: [\r\n                CustomDropdownMenuItem(\r\n                    value: 'p',\r\n                    child: PointerInterceptor(child: Text('Normal'))),\r\n                CustomDropdownMenuItem(\r\n                    value: 'blockquote',\r\n                    child: PointerInterceptor(\r\n                      child: Container(\r\n                          decoration: BoxDecoration(\r\n                              border: Border(\r\n                                  left: BorderSide(\r\n                                      color: Colors.grey, width: 3.0))),\r\n                          padding: EdgeInsets.symmetric(horizontal: 10.0),\r\n                          child: Text('Quote',\r\n                              style: TextStyle(\r\n                                  fontFamily: 'times', color: Colors.grey))),\r\n                    )),\r\n                CustomDropdownMenuItem(\r\n                    value: 'pre',\r\n                    child: PointerInterceptor(\r\n                      child: Container(\r\n                          decoration: BoxDecoration(\r\n                              borderRadius: BorderRadius.circular(5),\r\n                              color: Colors.grey),\r\n                          padding: EdgeInsets.symmetric(horizontal: 10.0),\r\n                          child: Text('Code',\r\n                              style: TextStyle(\r\n                                  fontFamily: 'courier', color: Colors.white))),\r\n                    )),\r\n                CustomDropdownMenuItem(\r\n                  value: 'h1',\r\n                  child: PointerInterceptor(\r\n                      child: Text('Header 1',\r\n                          style: TextStyle(\r\n                              fontWeight: FontWeight.bold, fontSize: 32))),\r\n                ),\r\n                CustomDropdownMenuItem(\r\n                  value: 'h2',\r\n                  child: PointerInterceptor(\r\n                      child: Text('Header 2',\r\n                          style: TextStyle(\r\n                              fontWeight: FontWeight.bold, fontSize: 24))),\r\n                ),\r\n                CustomDropdownMenuItem(\r\n                  value: 'h3',\r\n                  child: PointerInterceptor(\r\n                      child: Text('Header 3',\r\n                          style: TextStyle(\r\n                              fontWeight: FontWeight.bold, fontSize: 18))),\r\n                ),\r\n                CustomDropdownMenuItem(\r\n                  value: 'h4',\r\n                  child: PointerInterceptor(\r\n                      child: Text('Header 4',\r\n                          style: TextStyle(\r\n                              fontWeight: FontWeight.bold, fontSize: 16))),\r\n                ),\r\n                CustomDropdownMenuItem(\r\n                  value: 'h5',\r\n                  child: PointerInterceptor(\r\n                      child: Text('Header 5',\r\n                          style: TextStyle(\r\n                              fontWeight: FontWeight.bold, fontSize: 13))),\r\n                ),\r\n                CustomDropdownMenuItem(\r\n                  value: 'h6',\r\n                  child: PointerInterceptor(\r\n                      child: Text('Header 6',\r\n                          style: TextStyle(\r\n                              fontWeight: FontWeight.bold, fontSize: 11))),\r\n                ),\r\n              ],\r\n              value: _fontSelectedItem,\r\n              onChanged: (String? changed) async {\r\n                void updateSelectedItem(dynamic changed) {\r\n                  if (changed is String) {\r\n                    setState(mounted, this.setState, () {\r\n                      _fontSelectedItem = changed;\r\n                    });\r\n                  }\r\n                }\r\n\r\n                if (changed != null) {\r\n                  var proceed =\r\n                      await widget.htmlToolbarOptions.onDropdownChanged?.call(\r\n                              DropdownType.style,\r\n                              changed,\r\n                              updateSelectedItem) ??\r\n                          true;\r\n                  if (proceed) {\r\n                    widget.controller\r\n                        .execCommand('formatBlock', argument: changed);\r\n                    updateSelectedItem(changed);\r\n                  }\r\n                }\r\n              },\r\n            ),\r\n          ),\r\n        ));\r\n      }\r\n      if (t is FontSettingButtons) {\r\n        if (t.fontName) {\r\n          toolbarChildren.add(Container(\r\n            padding: const EdgeInsets.only(left: 8.0),\r\n            height: widget.htmlToolbarOptions.toolbarItemHeight,\r\n            decoration: !widget.htmlToolbarOptions.renderBorder\r\n                ? null\r\n                : widget.htmlToolbarOptions.dropdownBoxDecoration ??\r\n                    BoxDecoration(\r\n                        color: Theme.of(context).scaffoldBackgroundColor,\r\n                        border: Border.all(\r\n                            color: Theme.of(context)\r\n                                .colorScheme\r\n                                .onSurface\r\n                                .withOpacity(0.12))),\r\n            child: CustomDropdownButtonHideUnderline(\r\n              child: CustomDropdownButton<String>(\r\n                elevation: widget.htmlToolbarOptions.dropdownElevation,\r\n                icon: widget.htmlToolbarOptions.dropdownIcon,\r\n                iconEnabledColor: widget.htmlToolbarOptions.dropdownIconColor,\r\n                iconSize: widget.htmlToolbarOptions.dropdownIconSize,\r\n                itemHeight: widget.htmlToolbarOptions.dropdownItemHeight,\r\n                focusColor: widget.htmlToolbarOptions.dropdownFocusColor,\r\n                dropdownColor:\r\n                    widget.htmlToolbarOptions.dropdownBackgroundColor,\r\n                menuDirection:\r\n                    widget.htmlToolbarOptions.dropdownMenuDirection ??\r\n                        (widget.htmlToolbarOptions.toolbarPosition ==\r\n                                ToolbarPosition.belowEditor\r\n                            ? DropdownMenuDirection.up\r\n                            : DropdownMenuDirection.down),\r\n                menuMaxHeight:\r\n                    widget.htmlToolbarOptions.dropdownMenuMaxHeight ??\r\n                        MediaQuery.of(context).size.height / 3,\r\n                style: widget.htmlToolbarOptions.textStyle,\r\n                items: [\r\n                  CustomDropdownMenuItem(\r\n                    value: 'Courier New',\r\n                    child: PointerInterceptor(\r\n                        child: Text('Courier New',\r\n                            style: TextStyle(fontFamily: 'Courier'))),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'sans-serif',\r\n                    child: PointerInterceptor(\r\n                        child: Text('Sans Serif',\r\n                            style: TextStyle(fontFamily: 'sans-serif'))),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'Times New Roman',\r\n                    child: PointerInterceptor(\r\n                        child: Text('Times New Roman',\r\n                            style: TextStyle(fontFamily: 'Times'))),\r\n                  ),\r\n                ],\r\n                value: _fontNameSelectedItem,\r\n                onChanged: (String? changed) async {\r\n                  void updateSelectedItem(dynamic changed) async {\r\n                    if (changed is String) {\r\n                      setState(mounted, this.setState, () {\r\n                        _fontNameSelectedItem = changed;\r\n                      });\r\n                    }\r\n                  }\r\n\r\n                  if (changed != null) {\r\n                    var proceed =\r\n                        await widget.htmlToolbarOptions.onDropdownChanged?.call(\r\n                                DropdownType.fontName,\r\n                                changed,\r\n                                updateSelectedItem) ??\r\n                            true;\r\n                    if (proceed) {\r\n                      widget.controller\r\n                          .execCommand('fontName', argument: changed);\r\n                      updateSelectedItem(changed);\r\n                    }\r\n                  }\r\n                },\r\n              ),\r\n            ),\r\n          ));\r\n        }\r\n        if (t.fontSize) {\r\n          toolbarChildren.add(Container(\r\n            padding: const EdgeInsets.only(left: 8.0),\r\n            height: widget.htmlToolbarOptions.toolbarItemHeight,\r\n            decoration: !widget.htmlToolbarOptions.renderBorder\r\n                ? null\r\n                : widget.htmlToolbarOptions.dropdownBoxDecoration ??\r\n                    BoxDecoration(\r\n                        color: Theme.of(context).scaffoldBackgroundColor,\r\n                        border: Border.all(\r\n                            color: Theme.of(context)\r\n                                .colorScheme\r\n                                .onSurface\r\n                                .withOpacity(0.12))),\r\n            child: CustomDropdownButtonHideUnderline(\r\n              child: CustomDropdownButton<double>(\r\n                elevation: widget.htmlToolbarOptions.dropdownElevation,\r\n                icon: widget.htmlToolbarOptions.dropdownIcon,\r\n                iconEnabledColor: widget.htmlToolbarOptions.dropdownIconColor,\r\n                iconSize: widget.htmlToolbarOptions.dropdownIconSize,\r\n                itemHeight: widget.htmlToolbarOptions.dropdownItemHeight,\r\n                focusColor: widget.htmlToolbarOptions.dropdownFocusColor,\r\n                dropdownColor:\r\n                    widget.htmlToolbarOptions.dropdownBackgroundColor,\r\n                menuDirection:\r\n                    widget.htmlToolbarOptions.dropdownMenuDirection ??\r\n                        (widget.htmlToolbarOptions.toolbarPosition ==\r\n                                ToolbarPosition.belowEditor\r\n                            ? DropdownMenuDirection.up\r\n                            : DropdownMenuDirection.down),\r\n                menuMaxHeight:\r\n                    widget.htmlToolbarOptions.dropdownMenuMaxHeight ??\r\n                        MediaQuery.of(context).size.height / 3,\r\n                style: widget.htmlToolbarOptions.textStyle,\r\n                items: [\r\n                  CustomDropdownMenuItem(\r\n                    value: 1,\r\n                    child: PointerInterceptor(\r\n                        child: Text(\r\n                            \"${_fontSizeUnitSelectedItem == \"px\" ? \"11\" : \"8\"} $_fontSizeUnitSelectedItem\")),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 2,\r\n                    child: PointerInterceptor(\r\n                        child: Text(\r\n                            \"${_fontSizeUnitSelectedItem == \"px\" ? \"13\" : \"10\"} $_fontSizeUnitSelectedItem\")),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 3,\r\n                    child: PointerInterceptor(\r\n                        child: Text(\r\n                            \"${_fontSizeUnitSelectedItem == \"px\" ? \"16\" : \"12\"} $_fontSizeUnitSelectedItem\")),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 4,\r\n                    child: PointerInterceptor(\r\n                        child: Text(\r\n                            \"${_fontSizeUnitSelectedItem == \"px\" ? \"19\" : \"14\"} $_fontSizeUnitSelectedItem\")),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 5,\r\n                    child: PointerInterceptor(\r\n                        child: Text(\r\n                            \"${_fontSizeUnitSelectedItem == \"px\" ? \"24\" : \"18\"} $_fontSizeUnitSelectedItem\")),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 6,\r\n                    child: PointerInterceptor(\r\n                        child: Text(\r\n                            \"${_fontSizeUnitSelectedItem == \"px\" ? \"32\" : \"24\"} $_fontSizeUnitSelectedItem\")),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 7,\r\n                    child: PointerInterceptor(\r\n                        child: Text(\r\n                            \"${_fontSizeUnitSelectedItem == \"px\" ? \"48\" : \"36\"} $_fontSizeUnitSelectedItem\")),\r\n                  ),\r\n                ],\r\n                value: _fontSizeSelectedItem,\r\n                onChanged: (double? changed) async {\r\n                  void updateSelectedItem(dynamic changed) {\r\n                    if (changed is double) {\r\n                      setState(mounted, this.setState, () {\r\n                        _fontSizeSelectedItem = changed;\r\n                      });\r\n                    }\r\n                  }\r\n\r\n                  if (changed != null) {\r\n                    var intChanged = changed.toInt();\r\n                    var proceed =\r\n                        await widget.htmlToolbarOptions.onDropdownChanged?.call(\r\n                                DropdownType.fontSize,\r\n                                changed,\r\n                                updateSelectedItem) ??\r\n                            true;\r\n                    if (proceed) {\r\n                      switch (intChanged) {\r\n                        case 1:\r\n                          _actualFontSizeSelectedItem = 11;\r\n                          break;\r\n                        case 2:\r\n                          _actualFontSizeSelectedItem = 13;\r\n                          break;\r\n                        case 3:\r\n                          _actualFontSizeSelectedItem = 16;\r\n                          break;\r\n                        case 4:\r\n                          _actualFontSizeSelectedItem = 19;\r\n                          break;\r\n                        case 5:\r\n                          _actualFontSizeSelectedItem = 24;\r\n                          break;\r\n                        case 6:\r\n                          _actualFontSizeSelectedItem = 32;\r\n                          break;\r\n                        case 7:\r\n                          _actualFontSizeSelectedItem = 48;\r\n                          break;\r\n                      }\r\n                      widget.controller.execCommand('fontSize',\r\n                          argument: changed.toString());\r\n                      updateSelectedItem(changed);\r\n                    }\r\n                  }\r\n                },\r\n              ),\r\n            ),\r\n          ));\r\n        }\r\n        if (t.fontSizeUnit) {\r\n          toolbarChildren.add(Container(\r\n            padding: const EdgeInsets.only(left: 8.0),\r\n            height: widget.htmlToolbarOptions.toolbarItemHeight,\r\n            decoration: !widget.htmlToolbarOptions.renderBorder\r\n                ? null\r\n                : widget.htmlToolbarOptions.dropdownBoxDecoration ??\r\n                    BoxDecoration(\r\n                        color: Theme.of(context).scaffoldBackgroundColor,\r\n                        border: Border.all(\r\n                            color: Theme.of(context)\r\n                                .colorScheme\r\n                                .onSurface\r\n                                .withOpacity(0.12))),\r\n            child: CustomDropdownButtonHideUnderline(\r\n              child: CustomDropdownButton<String>(\r\n                elevation: widget.htmlToolbarOptions.dropdownElevation,\r\n                icon: widget.htmlToolbarOptions.dropdownIcon,\r\n                iconEnabledColor: widget.htmlToolbarOptions.dropdownIconColor,\r\n                iconSize: widget.htmlToolbarOptions.dropdownIconSize,\r\n                itemHeight: widget.htmlToolbarOptions.dropdownItemHeight,\r\n                focusColor: widget.htmlToolbarOptions.dropdownFocusColor,\r\n                dropdownColor:\r\n                    widget.htmlToolbarOptions.dropdownBackgroundColor,\r\n                menuDirection:\r\n                    widget.htmlToolbarOptions.dropdownMenuDirection ??\r\n                        (widget.htmlToolbarOptions.toolbarPosition ==\r\n                                ToolbarPosition.belowEditor\r\n                            ? DropdownMenuDirection.up\r\n                            : DropdownMenuDirection.down),\r\n                menuMaxHeight:\r\n                    widget.htmlToolbarOptions.dropdownMenuMaxHeight ??\r\n                        MediaQuery.of(context).size.height / 3,\r\n                style: widget.htmlToolbarOptions.textStyle,\r\n                items: [\r\n                  CustomDropdownMenuItem(\r\n                    value: 'pt',\r\n                    child: PointerInterceptor(child: Text('pt')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'px',\r\n                    child: PointerInterceptor(child: Text('px')),\r\n                  ),\r\n                ],\r\n                value: _fontSizeUnitSelectedItem,\r\n                onChanged: (String? changed) async {\r\n                  void updateSelectedItem(dynamic changed) {\r\n                    if (changed is String) {\r\n                      setState(mounted, this.setState, () {\r\n                        _fontSizeUnitSelectedItem = changed;\r\n                      });\r\n                    }\r\n                  }\r\n\r\n                  if (changed != null) {\r\n                    var proceed =\r\n                        await widget.htmlToolbarOptions.onDropdownChanged?.call(\r\n                                DropdownType.fontSizeUnit,\r\n                                changed,\r\n                                updateSelectedItem) ??\r\n                            true;\r\n                    if (proceed) {\r\n                      updateSelectedItem(changed);\r\n                    }\r\n                  }\r\n                },\r\n              ),\r\n            ),\r\n          ));\r\n        }\r\n      }\r\n      if (t is FontButtons) {\r\n        if (t.bold || t.italic || t.underline || t.clearAll) {\r\n          toolbarChildren.add(ToggleButtons(\r\n            constraints: BoxConstraints.tightFor(\r\n              width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            ),\r\n            color: widget.htmlToolbarOptions.buttonColor,\r\n            selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n            fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n            focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n            highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n            hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n            splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n            selectedBorderColor:\r\n                widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n            borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n            borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n            borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n            renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n            textStyle: widget.htmlToolbarOptions.textStyle,\r\n            onPressed: (int index) async {\r\n              void updateStatus() {\r\n                setState(mounted, this.setState, () {\r\n                  _fontSelected[index] = !_fontSelected[index];\r\n                });\r\n              }\r\n\r\n              if (t.getIcons1()[index].icon == Icons.format_bold) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.bold, _fontSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('bold');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.format_italic) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.italic, _fontSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('italic');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.format_underline) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.underline, _fontSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('underline');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.format_clear) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.clearFormatting, null, null) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('removeFormat');\r\n                }\r\n              }\r\n            },\r\n            isSelected: _fontSelected,\r\n            children: t.getIcons1(),\r\n          ));\r\n        }\r\n        if (t.strikethrough || t.superscript || t.subscript) {\r\n          toolbarChildren.add(ToggleButtons(\r\n            constraints: BoxConstraints.tightFor(\r\n              width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            ),\r\n            color: widget.htmlToolbarOptions.buttonColor,\r\n            selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n            fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n            focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n            highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n            hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n            splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n            selectedBorderColor:\r\n                widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n            borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n            borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n            borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n            renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n            textStyle: widget.htmlToolbarOptions.textStyle,\r\n            onPressed: (int index) async {\r\n              void updateStatus() {\r\n                setState(mounted, this.setState, () {\r\n                  _miscFontSelected[index] = !_miscFontSelected[index];\r\n                });\r\n              }\r\n\r\n              if (t.getIcons2()[index].icon == Icons.format_strikethrough) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.strikethrough,\r\n                            _miscFontSelected[index], updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('strikeThrough');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons2()[index].icon == Icons.superscript) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.superscript, _miscFontSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('superscript');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons2()[index].icon == Icons.subscript) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.subscript, _miscFontSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('subscript');\r\n                  updateStatus();\r\n                }\r\n              }\r\n            },\r\n            isSelected: _miscFontSelected,\r\n            children: t.getIcons2(),\r\n          ));\r\n        }\r\n      }\r\n      if (t is ColorButtons && (t.foregroundColor || t.highlightColor)) {\r\n        toolbarChildren.add(ToggleButtons(\r\n          constraints: BoxConstraints.tightFor(\r\n            width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n          ),\r\n          color: widget.htmlToolbarOptions.buttonColor,\r\n          selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n          fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n          focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n          highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n          hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n          splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n          selectedBorderColor:\r\n              widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n          borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n          borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n          borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n          renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n          textStyle: widget.htmlToolbarOptions.textStyle,\r\n          onPressed: (int index) async {\r\n            void updateStatus(Color? color) {\r\n              setState(mounted, this.setState, () {\r\n                _colorSelected[index] = !_colorSelected[index];\r\n                if (color != null &&\r\n                    t.getIcons()[index].icon == Icons.format_color_text) {\r\n                  _foreColorSelected = color;\r\n                }\r\n                if (color != null &&\r\n                    t.getIcons()[index].icon == Icons.format_color_fill) {\r\n                  _backColorSelected = color;\r\n                }\r\n              });\r\n            }\r\n\r\n            if (_colorSelected[index]) {\r\n              if (t.getIcons()[index].icon == Icons.format_color_text) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.foregroundColor,\r\n                            _colorSelected[index], updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('foreColor',\r\n                      argument: (Colors.black.value & 0xFFFFFF)\r\n                          .toRadixString(16)\r\n                          .padLeft(6, '0')\r\n                          .toUpperCase());\r\n                  updateStatus(null);\r\n                }\r\n              }\r\n              if (t.getIcons()[index].icon == Icons.format_color_fill) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.highlightColor, _colorSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('hiliteColor',\r\n                      argument: (Colors.yellow.value & 0xFFFFFF)\r\n                          .toRadixString(16)\r\n                          .padLeft(6, '0')\r\n                          .toUpperCase());\r\n                  updateStatus(null);\r\n                }\r\n              }\r\n            } else {\r\n              var proceed = true;\r\n              if (t.getIcons()[index].icon == Icons.format_color_text) {\r\n                proceed = await widget.htmlToolbarOptions.onButtonPressed?.call(\r\n                        ButtonType.foregroundColor,\r\n                        _colorSelected[index],\r\n                        updateStatus) ??\r\n                    true;\r\n              } else if (t.getIcons()[index].icon == Icons.format_color_fill) {\r\n                proceed = await widget.htmlToolbarOptions.onButtonPressed?.call(\r\n                        ButtonType.highlightColor,\r\n                        _colorSelected[index],\r\n                        updateStatus) ??\r\n                    true;\r\n              }\r\n              if (proceed) {\r\n                late Color newColor;\r\n                if (t.getIcons()[index].icon == Icons.format_color_text) {\r\n                  newColor = _foreColorSelected;\r\n                } else {\r\n                  newColor = _backColorSelected;\r\n                }\r\n                await showDialog(\r\n                    context: context,\r\n                    builder: (BuildContext context) {\r\n                      return PointerInterceptor(\r\n                        child: AlertDialog(\r\n                          scrollable: true,\r\n                          content: ColorPicker(\r\n                            color: newColor,\r\n                            onColorChanged: (color) {\r\n                              newColor = color;\r\n                            },\r\n                            title: Text('Choose a Color',\r\n                                style: Theme.of(context).textTheme.titleLarge),\r\n                            width: 40,\r\n                            height: 40,\r\n                            spacing: 0,\r\n                            runSpacing: 0,\r\n                            borderRadius: 0,\r\n                            wheelDiameter: 165,\r\n                            enableOpacity: false,\r\n                            showColorCode: true,\r\n                            colorCodeHasColor: true,\r\n                            pickersEnabled: <ColorPickerType, bool>{\r\n                              ColorPickerType.wheel: true,\r\n                            },\r\n                            copyPasteBehavior:\r\n                                const ColorPickerCopyPasteBehavior(\r\n                              parseShortHexCode: true,\r\n                            ),\r\n                            actionButtons: const ColorPickerActionButtons(\r\n                              dialogActionButtons: true,\r\n                            ),\r\n                          ),\r\n                          actions: <Widget>[\r\n                            TextButton(\r\n                              onPressed: () {\r\n                                Navigator.of(context).pop();\r\n                              },\r\n                              child: Text('Cancel'),\r\n                            ),\r\n                            TextButton(\r\n                                onPressed: () {\r\n                                  if (t.getIcons()[index].icon ==\r\n                                      Icons.format_color_text) {\r\n                                    setState(mounted, this.setState, () {\r\n                                      _foreColorSelected = Colors.black;\r\n                                    });\r\n                                    widget.controller.execCommand(\r\n                                        'removeFormat',\r\n                                        argument: 'foreColor');\r\n                                    widget.controller.execCommand('foreColor',\r\n                                        argument: 'initial');\r\n                                  }\r\n                                  if (t.getIcons()[index].icon ==\r\n                                      Icons.format_color_fill) {\r\n                                    setState(mounted, this.setState, () {\r\n                                      _backColorSelected = Colors.yellow;\r\n                                    });\r\n                                    widget.controller.execCommand(\r\n                                        'removeFormat',\r\n                                        argument: 'hiliteColor');\r\n                                    widget.controller.execCommand('hiliteColor',\r\n                                        argument: 'initial');\r\n                                  }\r\n                                  Navigator.of(context).pop();\r\n                                },\r\n                                child: Text('Reset to default color')),\r\n                            TextButton(\r\n                              onPressed: () {\r\n                                if (t.getIcons()[index].icon ==\r\n                                    Icons.format_color_text) {\r\n                                  widget.controller.execCommand('foreColor',\r\n                                      argument: (newColor.value & 0xFFFFFF)\r\n                                          .toRadixString(16)\r\n                                          .padLeft(6, '0')\r\n                                          .toUpperCase());\r\n                                  setState(mounted, this.setState, () {\r\n                                    _foreColorSelected = newColor;\r\n                                  });\r\n                                }\r\n                                if (t.getIcons()[index].icon ==\r\n                                    Icons.format_color_fill) {\r\n                                  widget.controller.execCommand('hiliteColor',\r\n                                      argument: (newColor.value & 0xFFFFFF)\r\n                                          .toRadixString(16)\r\n                                          .padLeft(6, '0')\r\n                                          .toUpperCase());\r\n                                  setState(mounted, this.setState, () {\r\n                                    _backColorSelected = newColor;\r\n                                  });\r\n                                }\r\n                                setState(mounted, this.setState, () {\r\n                                  _colorSelected[index] =\r\n                                      !_colorSelected[index];\r\n                                });\r\n                                Navigator.of(context).pop();\r\n                              },\r\n                              child: Text('Set color'),\r\n                            )\r\n                          ],\r\n                        ),\r\n                      );\r\n                    });\r\n              }\r\n            }\r\n          },\r\n          isSelected: _colorSelected,\r\n          children: t.getIcons(),\r\n        ));\r\n      }\r\n      if (t is ListButtons) {\r\n        if (t.ul || t.ol) {\r\n          toolbarChildren.add(ToggleButtons(\r\n            constraints: BoxConstraints.tightFor(\r\n              width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            ),\r\n            color: widget.htmlToolbarOptions.buttonColor,\r\n            selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n            fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n            focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n            highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n            hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n            splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n            selectedBorderColor:\r\n                widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n            borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n            borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n            borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n            renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n            textStyle: widget.htmlToolbarOptions.textStyle,\r\n            onPressed: (int index) async {\r\n              void updateStatus() {\r\n                setState(mounted, this.setState, () {\r\n                  _listSelected[index] = !_listSelected[index];\r\n                });\r\n              }\r\n\r\n              if (t.getIcons()[index].icon == Icons.format_list_bulleted) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.ul, _listSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('insertUnorderedList');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons()[index].icon == Icons.format_list_numbered) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.ol, _listSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('insertOrderedList');\r\n                  updateStatus();\r\n                }\r\n              }\r\n            },\r\n            isSelected: _listSelected,\r\n            children: t.getIcons(),\r\n          ));\r\n        }\r\n        if (t.listStyles) {\r\n          toolbarChildren.add(Container(\r\n            padding: const EdgeInsets.only(left: 8.0),\r\n            height: widget.htmlToolbarOptions.toolbarItemHeight,\r\n            decoration: !widget.htmlToolbarOptions.renderBorder\r\n                ? null\r\n                : widget.htmlToolbarOptions.dropdownBoxDecoration ??\r\n                    BoxDecoration(\r\n                        color: Theme.of(context).scaffoldBackgroundColor,\r\n                        border: Border.all(\r\n                            color: Theme.of(context)\r\n                                .colorScheme\r\n                                .onSurface\r\n                                .withOpacity(0.12))),\r\n            child: CustomDropdownButtonHideUnderline(\r\n              child: CustomDropdownButton<String>(\r\n                elevation: widget.htmlToolbarOptions.dropdownElevation,\r\n                icon: widget.htmlToolbarOptions.dropdownIcon,\r\n                iconEnabledColor: widget.htmlToolbarOptions.dropdownIconColor,\r\n                iconSize: widget.htmlToolbarOptions.dropdownIconSize,\r\n                itemHeight: widget.htmlToolbarOptions.dropdownItemHeight,\r\n                focusColor: widget.htmlToolbarOptions.dropdownFocusColor,\r\n                dropdownColor:\r\n                    widget.htmlToolbarOptions.dropdownBackgroundColor,\r\n                menuDirection:\r\n                    widget.htmlToolbarOptions.dropdownMenuDirection ??\r\n                        (widget.htmlToolbarOptions.toolbarPosition ==\r\n                                ToolbarPosition.belowEditor\r\n                            ? DropdownMenuDirection.up\r\n                            : DropdownMenuDirection.down),\r\n                menuMaxHeight:\r\n                    widget.htmlToolbarOptions.dropdownMenuMaxHeight ??\r\n                        MediaQuery.of(context).size.height / 3,\r\n                style: widget.htmlToolbarOptions.textStyle,\r\n                items: [\r\n                  CustomDropdownMenuItem(\r\n                    value: 'decimal',\r\n                    child: PointerInterceptor(child: Text('1. Numbered')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'lower-alpha',\r\n                    child: PointerInterceptor(child: Text('a. Lower Alpha')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'upper-alpha',\r\n                    child: PointerInterceptor(child: Text('A. Upper Alpha')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'lower-roman',\r\n                    child: PointerInterceptor(child: Text('i. Lower Roman')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'upper-roman',\r\n                    child: PointerInterceptor(child: Text('I. Upper Roman')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'disc',\r\n                    child: PointerInterceptor(child: Text('• Disc')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'circle',\r\n                    child: PointerInterceptor(child: Text('○ Circle')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'square',\r\n                    child: PointerInterceptor(child: Text('■ Square')),\r\n                  ),\r\n                ],\r\n                hint: Text('Select list style'),\r\n                value: _listStyleSelectedItem,\r\n                onChanged: (String? changed) async {\r\n                  void updateSelectedItem(dynamic changed) {\r\n                    if (changed is String) {\r\n                      setState(mounted, this.setState, () {\r\n                        _listStyleSelectedItem = changed;\r\n                      });\r\n                    }\r\n                  }\r\n\r\n                  if (changed != null) {\r\n                    var proceed =\r\n                        await widget.htmlToolbarOptions.onDropdownChanged?.call(\r\n                                DropdownType.listStyles,\r\n                                changed,\r\n                                updateSelectedItem) ??\r\n                            true;\r\n                    if (proceed) {\r\n                      if (kIsWeb) {\r\n                        widget.controller.changeListStyle(changed);\r\n                      } else {\r\n                        await widget.controller.editorController!\r\n                            .evaluateJavascript(source: '''\r\n                               var \\$focusNode = \\$(window.getSelection().focusNode);\r\n                               var \\$parentList = \\$focusNode.closest(\"div.note-editable ol, div.note-editable ul\");\r\n                               \\$parentList.css(\"list-style-type\", \"$changed\");\r\n                            ''');\r\n                      }\r\n                      updateSelectedItem(changed);\r\n                    }\r\n                  }\r\n                },\r\n              ),\r\n            ),\r\n          ));\r\n        }\r\n      }\r\n      if (t is ParagraphButtons) {\r\n        if (t.alignLeft || t.alignCenter || t.alignRight || t.alignJustify) {\r\n          toolbarChildren.add(ToggleButtons(\r\n            constraints: BoxConstraints.tightFor(\r\n              width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            ),\r\n            color: widget.htmlToolbarOptions.buttonColor,\r\n            selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n            fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n            focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n            highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n            hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n            splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n            selectedBorderColor:\r\n                widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n            borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n            borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n            borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n            renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n            textStyle: widget.htmlToolbarOptions.textStyle,\r\n            onPressed: (int index) async {\r\n              void updateStatus() {\r\n                _alignSelected = List<bool>.filled(t.getIcons1().length, false);\r\n                setState(mounted, this.setState, () {\r\n                  _alignSelected[index] = !_alignSelected[index];\r\n                });\r\n              }\r\n\r\n              if (t.getIcons1()[index].icon == Icons.format_align_left) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.alignLeft, _alignSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('justifyLeft');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.format_align_center) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.alignCenter, _alignSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('justifyCenter');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.format_align_right) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.alignRight, _alignSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('justifyRight');\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.format_align_justify) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.alignJustify, _alignSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('justifyFull');\r\n                  updateStatus();\r\n                }\r\n              }\r\n            },\r\n            isSelected: _alignSelected,\r\n            children: t.getIcons1(),\r\n          ));\r\n        }\r\n        if (t.increaseIndent || t.decreaseIndent) {\r\n          toolbarChildren.add(ToggleButtons(\r\n            constraints: BoxConstraints.tightFor(\r\n              width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            ),\r\n            color: widget.htmlToolbarOptions.buttonColor,\r\n            selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n            fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n            focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n            highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n            hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n            splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n            selectedBorderColor:\r\n                widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n            borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n            borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n            borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n            renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n            textStyle: widget.htmlToolbarOptions.textStyle,\r\n            onPressed: (int index) async {\r\n              if (t.getIcons2()[index].icon == Icons.format_indent_increase) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.increaseIndent, null, null) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('indent');\r\n                }\r\n              }\r\n              if (t.getIcons2()[index].icon == Icons.format_indent_decrease) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.decreaseIndent, null, null) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.execCommand('outdent');\r\n                }\r\n              }\r\n            },\r\n            isSelected: List<bool>.filled(t.getIcons2().length, false),\r\n            children: t.getIcons2(),\r\n          ));\r\n        }\r\n        if (t.lineHeight) {\r\n          toolbarChildren.add(Container(\r\n            padding: const EdgeInsets.only(left: 8.0),\r\n            height: widget.htmlToolbarOptions.toolbarItemHeight,\r\n            decoration: !widget.htmlToolbarOptions.renderBorder\r\n                ? null\r\n                : widget.htmlToolbarOptions.dropdownBoxDecoration ??\r\n                    BoxDecoration(\r\n                        color: Theme.of(context).scaffoldBackgroundColor,\r\n                        border: Border.all(\r\n                            color: Theme.of(context)\r\n                                .colorScheme\r\n                                .onSurface\r\n                                .withOpacity(0.12))),\r\n            child: CustomDropdownButtonHideUnderline(\r\n              child: CustomDropdownButton<double>(\r\n                elevation: widget.htmlToolbarOptions.dropdownElevation,\r\n                icon: widget.htmlToolbarOptions.dropdownIcon,\r\n                iconEnabledColor: widget.htmlToolbarOptions.dropdownIconColor,\r\n                iconSize: widget.htmlToolbarOptions.dropdownIconSize,\r\n                itemHeight: widget.htmlToolbarOptions.dropdownItemHeight,\r\n                focusColor: widget.htmlToolbarOptions.dropdownFocusColor,\r\n                dropdownColor:\r\n                    widget.htmlToolbarOptions.dropdownBackgroundColor,\r\n                menuDirection:\r\n                    widget.htmlToolbarOptions.dropdownMenuDirection ??\r\n                        (widget.htmlToolbarOptions.toolbarPosition ==\r\n                                ToolbarPosition.belowEditor\r\n                            ? DropdownMenuDirection.up\r\n                            : DropdownMenuDirection.down),\r\n                menuMaxHeight:\r\n                    widget.htmlToolbarOptions.dropdownMenuMaxHeight ??\r\n                        MediaQuery.of(context).size.height / 3,\r\n                style: widget.htmlToolbarOptions.textStyle,\r\n                items: [\r\n                  CustomDropdownMenuItem(\r\n                      value: 1, child: PointerInterceptor(child: Text('1.0'))),\r\n                  CustomDropdownMenuItem(\r\n                    value: 1.2,\r\n                    child: PointerInterceptor(child: Text('1.2')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 1.4,\r\n                    child: PointerInterceptor(child: Text('1.4')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 1.5,\r\n                    child: PointerInterceptor(child: Text('1.5')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 1.6,\r\n                    child: PointerInterceptor(child: Text('1.6')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 1.8,\r\n                    child: PointerInterceptor(child: Text('1.8')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 2,\r\n                    child: PointerInterceptor(child: Text('2.0')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                      value: 3, child: PointerInterceptor(child: Text('3.0'))),\r\n                ],\r\n                value: _lineHeightSelectedItem,\r\n                onChanged: (double? changed) async {\r\n                  void updateSelectedItem(dynamic changed) {\r\n                    if (changed is double) {\r\n                      setState(mounted, this.setState, () {\r\n                        _lineHeightSelectedItem = changed;\r\n                      });\r\n                    }\r\n                  }\r\n\r\n                  if (changed != null) {\r\n                    var proceed =\r\n                        await widget.htmlToolbarOptions.onDropdownChanged?.call(\r\n                                DropdownType.lineHeight,\r\n                                changed,\r\n                                updateSelectedItem) ??\r\n                            true;\r\n                    if (proceed) {\r\n                      if (kIsWeb) {\r\n                        widget.controller.changeLineHeight(changed.toString());\r\n                      } else {\r\n                        await widget.controller.editorController!\r\n                            .evaluateJavascript(\r\n                                source:\r\n                                    \"\\$('#summernote-2').summernote('lineHeight', '$changed');\");\r\n                      }\r\n                      updateSelectedItem(changed);\r\n                    }\r\n                  }\r\n                },\r\n              ),\r\n            ),\r\n          ));\r\n        }\r\n        if (t.textDirection) {\r\n          toolbarChildren.add(ToggleButtons(\r\n            constraints: BoxConstraints.tightFor(\r\n              width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            ),\r\n            color: widget.htmlToolbarOptions.buttonColor,\r\n            selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n            fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n            focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n            highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n            hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n            splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n            selectedBorderColor:\r\n                widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n            borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n            borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n            borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n            renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n            textStyle: widget.htmlToolbarOptions.textStyle,\r\n            onPressed: (int index) async {\r\n              void updateStatus() {\r\n                _textDirectionSelected = List<bool>.filled(2, false);\r\n                setState(mounted, this.setState, () {\r\n                  _textDirectionSelected[index] =\r\n                      !_textDirectionSelected[index];\r\n                });\r\n              }\r\n\r\n              var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                      ?.call(index == 0 ? ButtonType.ltr : ButtonType.rtl,\r\n                          _alignSelected[index], updateStatus) ??\r\n                  true;\r\n              if (proceed) {\r\n                if (kIsWeb) {\r\n                  widget.controller\r\n                      .changeTextDirection(index == 0 ? 'ltr' : 'rtl');\r\n                } else {\r\n                  await widget.controller.editorController!\r\n                      .evaluateJavascript(source: \"\"\"\r\n                  var s=document.getSelection();\t\t\t\r\n                  if(s==''){\r\n                      document.execCommand(\"insertHTML\", false, \"<p dir='${index == 0 ? \"ltr\" : \"rtl\"}'></p>\");\r\n                  }else{\r\n                      document.execCommand(\"insertHTML\", false, \"<div dir='${index == 0 ? \"ltr\" : \"rtl\"}'>\"+ document.getSelection()+\"</div>\");\r\n                  }\r\n                \"\"\");\r\n                }\r\n                updateStatus();\r\n              }\r\n            },\r\n            isSelected: _textDirectionSelected,\r\n            children: [\r\n              Icon(Icons.format_textdirection_l_to_r),\r\n              Icon(Icons.format_textdirection_r_to_l),\r\n            ],\r\n          ));\r\n        }\r\n        if (t.caseConverter) {\r\n          toolbarChildren.add(Container(\r\n            padding: const EdgeInsets.only(left: 8.0),\r\n            height: widget.htmlToolbarOptions.toolbarItemHeight,\r\n            decoration: !widget.htmlToolbarOptions.renderBorder\r\n                ? null\r\n                : widget.htmlToolbarOptions.dropdownBoxDecoration ??\r\n                    BoxDecoration(\r\n                        color: Theme.of(context).scaffoldBackgroundColor,\r\n                        border: Border.all(\r\n                            color: Theme.of(context)\r\n                                .colorScheme\r\n                                .onSurface\r\n                                .withOpacity(0.12))),\r\n            child: CustomDropdownButtonHideUnderline(\r\n              child: CustomDropdownButton<String>(\r\n                elevation: widget.htmlToolbarOptions.dropdownElevation,\r\n                icon: widget.htmlToolbarOptions.dropdownIcon,\r\n                iconEnabledColor: widget.htmlToolbarOptions.dropdownIconColor,\r\n                iconSize: widget.htmlToolbarOptions.dropdownIconSize,\r\n                itemHeight: widget.htmlToolbarOptions.dropdownItemHeight,\r\n                focusColor: widget.htmlToolbarOptions.dropdownFocusColor,\r\n                dropdownColor:\r\n                    widget.htmlToolbarOptions.dropdownBackgroundColor,\r\n                menuDirection:\r\n                    widget.htmlToolbarOptions.dropdownMenuDirection ??\r\n                        (widget.htmlToolbarOptions.toolbarPosition ==\r\n                                ToolbarPosition.belowEditor\r\n                            ? DropdownMenuDirection.up\r\n                            : DropdownMenuDirection.down),\r\n                menuMaxHeight:\r\n                    widget.htmlToolbarOptions.dropdownMenuMaxHeight ??\r\n                        MediaQuery.of(context).size.height / 3,\r\n                style: widget.htmlToolbarOptions.textStyle,\r\n                items: [\r\n                  CustomDropdownMenuItem(\r\n                    value: 'lower',\r\n                    child: PointerInterceptor(child: Text('lowercase')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'sentence',\r\n                    child: PointerInterceptor(child: Text('Sentence case')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'title',\r\n                    child: PointerInterceptor(child: Text('Title Case')),\r\n                  ),\r\n                  CustomDropdownMenuItem(\r\n                    value: 'upper',\r\n                    child: PointerInterceptor(child: Text('UPPERCASE')),\r\n                  ),\r\n                ],\r\n                hint: Text('Change case'),\r\n                value: null,\r\n                onChanged: (String? changed) async {\r\n                  if (changed != null) {\r\n                    var proceed = await widget\r\n                            .htmlToolbarOptions.onDropdownChanged\r\n                            ?.call(DropdownType.caseConverter, changed, null) ??\r\n                        true;\r\n                    if (proceed) {\r\n                      if (kIsWeb) {\r\n                        widget.controller.changeCase(changed);\r\n                      } else {\r\n                        await widget.controller.editorController!\r\n                            .evaluateJavascript(source: \"\"\"\r\n                          var selected = \\$('#summernote-2').summernote('createRange');\r\n                          if(selected.toString()){\r\n                              var texto;\r\n                              var count = 0;\r\n                              var value = \"$changed\";\r\n                              var nodes = selected.nodes();\r\n                              for (var i=0; i< nodes.length; ++i) {\r\n                                  if (nodes[i].nodeName == \"#text\") {\r\n                                      count++;\r\n                                      texto = nodes[i].nodeValue.toLowerCase();\r\n                                      nodes[i].nodeValue = texto;\r\n                                      if (value == 'upper') {\r\n                                         nodes[i].nodeValue = texto.toUpperCase();\r\n                                      }\r\n                                      else if (value == 'sentence' && count==1) {\r\n                                         nodes[i].nodeValue = texto.charAt(0).toUpperCase() + texto.slice(1).toLowerCase();\r\n                                      } else if (value == 'title') {\r\n                                        var sentence = texto.split(\" \");\r\n                                        for(var j = 0; j< sentence.length; j++){\r\n                                           sentence[j] = sentence[j][0].toUpperCase() + sentence[j].slice(1);\r\n                                        }\r\n                                        nodes[i].nodeValue = sentence.join(\" \");\r\n                                      }\r\n                                  }\r\n                              }\r\n                          }\r\n                        \"\"\");\r\n                      }\r\n                    }\r\n                  }\r\n                },\r\n              ),\r\n            ),\r\n          ));\r\n        }\r\n      }\r\n      if (t is InsertButtons &&\r\n          (t.audio ||\r\n              t.video ||\r\n              t.otherFile ||\r\n              t.picture ||\r\n              t.link ||\r\n              t.hr ||\r\n              t.table)) {\r\n        toolbarChildren.add(ToggleButtons(\r\n          constraints: BoxConstraints.tightFor(\r\n            width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n          ),\r\n          color: widget.htmlToolbarOptions.buttonColor,\r\n          selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n          fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n          focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n          highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n          hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n          splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n          selectedBorderColor:\r\n              widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n          borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n          borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n          borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n          renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n          textStyle: widget.htmlToolbarOptions.textStyle,\r\n          onPressed: (int index) async {\r\n            if (t.getIcons()[index].icon == Icons.link) {\r\n              var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                      ?.call(ButtonType.link, null, null) ??\r\n                  true;\r\n              if (proceed) {\r\n                final text = TextEditingController();\r\n                final url = TextEditingController();\r\n                final textFocus = FocusNode();\r\n                final urlFocus = FocusNode();\r\n                final formKey = GlobalKey<FormState>();\r\n                var openNewTab = false;\r\n                await showDialog(\r\n                    context: context,\r\n                    builder: (BuildContext context) {\r\n                      return PointerInterceptor(\r\n                        child: StatefulBuilder(builder:\r\n                            (BuildContext context, StateSetter setState) {\r\n                          return AlertDialog(\r\n                            title: Text('Insert Link'),\r\n                            scrollable: true,\r\n                            content: Form(\r\n                              key: formKey,\r\n                              child: Column(\r\n                                  mainAxisSize: MainAxisSize.min,\r\n                                  crossAxisAlignment: CrossAxisAlignment.start,\r\n                                  children: [\r\n                                    Text('Text to display',\r\n                                        style: TextStyle(\r\n                                            fontWeight: FontWeight.bold)),\r\n                                    SizedBox(height: 10),\r\n                                    TextField(\r\n                                      controller: text,\r\n                                      focusNode: textFocus,\r\n                                      textInputAction: TextInputAction.next,\r\n                                      decoration: InputDecoration(\r\n                                        border: OutlineInputBorder(),\r\n                                        hintText: 'Text',\r\n                                      ),\r\n                                      onSubmitted: (_) {\r\n                                        urlFocus.requestFocus();\r\n                                      },\r\n                                    ),\r\n                                    SizedBox(height: 20),\r\n                                    Text('URL',\r\n                                        style: TextStyle(\r\n                                            fontWeight: FontWeight.bold)),\r\n                                    SizedBox(height: 10),\r\n                                    TextFormField(\r\n                                      controller: url,\r\n                                      focusNode: urlFocus,\r\n                                      textInputAction: TextInputAction.done,\r\n                                      decoration: InputDecoration(\r\n                                        border: OutlineInputBorder(),\r\n                                        hintText: 'URL',\r\n                                      ),\r\n                                      validator: (String? value) {\r\n                                        if (value == null || value.isEmpty) {\r\n                                          return 'Please enter a URL!';\r\n                                        }\r\n                                        return null;\r\n                                      },\r\n                                    ),\r\n                                    Row(\r\n                                      children: <Widget>[\r\n                                        SizedBox(\r\n                                          height: 48.0,\r\n                                          width: 24.0,\r\n                                          child: Checkbox(\r\n                                            value: openNewTab,\r\n                                            activeColor: Color(0xFF827250),\r\n                                            onChanged: (bool? value) {\r\n                                              setState(() {\r\n                                                openNewTab = value!;\r\n                                              });\r\n                                            },\r\n                                          ),\r\n                                        ),\r\n                                        ElevatedButton(\r\n                                          style: ElevatedButton.styleFrom(\r\n                                              backgroundColor: Theme.of(context)\r\n                                                  .dialogBackgroundColor,\r\n                                              padding: EdgeInsets.only(\r\n                                                  left: 5, right: 5),\r\n                                              elevation: 0.0),\r\n                                          onPressed: () {\r\n                                            setState(() {\r\n                                              openNewTab = !openNewTab;\r\n                                            });\r\n                                          },\r\n                                          child: Text('Open in new window',\r\n                                              style: TextStyle(\r\n                                                  color: Theme.of(context)\r\n                                                      .textTheme\r\n                                                      .bodyLarge\r\n                                                      ?.color)),\r\n                                        ),\r\n                                      ],\r\n                                    ),\r\n                                  ]),\r\n                            ),\r\n                            actions: [\r\n                              TextButton(\r\n                                onPressed: () {\r\n                                  Navigator.of(context).pop();\r\n                                },\r\n                                child: Text('Cancel'),\r\n                              ),\r\n                              TextButton(\r\n                                onPressed: () async {\r\n                                  if (formKey.currentState!.validate()) {\r\n                                    var proceed = await widget\r\n                                            .htmlToolbarOptions\r\n                                            .linkInsertInterceptor\r\n                                            ?.call(\r\n                                                text.text.isEmpty\r\n                                                    ? url.text\r\n                                                    : text.text,\r\n                                                url.text,\r\n                                                openNewTab) ??\r\n                                        true;\r\n                                    if (proceed) {\r\n                                      widget.controller.insertLink(\r\n                                        text.text.isEmpty\r\n                                            ? url.text\r\n                                            : text.text,\r\n                                        url.text,\r\n                                        openNewTab,\r\n                                      );\r\n                                    }\r\n                                    Navigator.of(context).pop();\r\n                                  }\r\n                                },\r\n                                child: Text('OK'),\r\n                              )\r\n                            ],\r\n                          );\r\n                        }),\r\n                      );\r\n                    });\r\n              }\r\n            }\r\n            if (t.getIcons()[index].icon == Icons.image_outlined) {\r\n              var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                      ?.call(ButtonType.picture, null, null) ??\r\n                  true;\r\n              if (proceed) {\r\n                final filename = TextEditingController();\r\n                final url = TextEditingController();\r\n                final urlFocus = FocusNode();\r\n                FilePickerResult? result;\r\n                String? validateFailed;\r\n                await showDialog(\r\n                    context: context,\r\n                    builder: (BuildContext context) {\r\n                      return PointerInterceptor(\r\n                        child: StatefulBuilder(builder:\r\n                            (BuildContext context, StateSetter setState) {\r\n                          return AlertDialog(\r\n                            title: Text('Insert Image'),\r\n                            scrollable: true,\r\n                            content: Column(\r\n                                mainAxisSize: MainAxisSize.min,\r\n                                crossAxisAlignment: CrossAxisAlignment.start,\r\n                                children: [\r\n                                  Text('Select from files',\r\n                                      style: TextStyle(\r\n                                          fontWeight: FontWeight.bold)),\r\n                                  SizedBox(height: 10),\r\n                                  TextFormField(\r\n                                      controller: filename,\r\n                                      readOnly: true,\r\n                                      decoration: InputDecoration(\r\n                                        prefixIcon: ElevatedButton(\r\n                                          style: ElevatedButton.styleFrom(\r\n                                              backgroundColor: Theme.of(context)\r\n                                                  .dialogBackgroundColor,\r\n                                              padding: EdgeInsets.only(\r\n                                                  left: 5, right: 5),\r\n                                              elevation: 0.0),\r\n                                          onPressed: () async {\r\n                                            result = await FilePicker.platform\r\n                                                .pickFiles(\r\n                                              type: FileType.image,\r\n                                              withData: true,\r\n                                              allowedExtensions: widget\r\n                                                  .htmlToolbarOptions\r\n                                                  .imageExtensions,\r\n                                            );\r\n                                            if (result?.files.single.name !=\r\n                                                null) {\r\n                                              setState(() {\r\n                                                filename.text =\r\n                                                    result!.files.single.name;\r\n                                              });\r\n                                            }\r\n                                          },\r\n                                          child: Text('Choose image',\r\n                                              style: TextStyle(\r\n                                                  color: Theme.of(context)\r\n                                                      .textTheme\r\n                                                      .bodyLarge\r\n                                                      ?.color)),\r\n                                        ),\r\n                                        suffixIcon: result != null\r\n                                            ? IconButton(\r\n                                                icon: Icon(Icons.close),\r\n                                                onPressed: () {\r\n                                                  setState(() {\r\n                                                    result = null;\r\n                                                    filename.text = '';\r\n                                                  });\r\n                                                })\r\n                                            : Container(height: 0, width: 0),\r\n                                        errorText: validateFailed,\r\n                                        errorMaxLines: 2,\r\n                                        border: InputBorder.none,\r\n                                      )),\r\n                                  SizedBox(height: 20),\r\n                                  Text('URL',\r\n                                      style: TextStyle(\r\n                                          fontWeight: FontWeight.bold)),\r\n                                  SizedBox(height: 10),\r\n                                  TextField(\r\n                                    controller: url,\r\n                                    focusNode: urlFocus,\r\n                                    textInputAction: TextInputAction.done,\r\n                                    decoration: InputDecoration(\r\n                                      border: OutlineInputBorder(),\r\n                                      hintText: 'URL',\r\n                                      errorText: validateFailed,\r\n                                      errorMaxLines: 2,\r\n                                    ),\r\n                                  ),\r\n                                ]),\r\n                            actions: [\r\n                              TextButton(\r\n                                onPressed: () {\r\n                                  Navigator.of(context).pop();\r\n                                },\r\n                                child: Text('Cancel'),\r\n                              ),\r\n                              TextButton(\r\n                                onPressed: () async {\r\n                                  if (filename.text.isEmpty &&\r\n                                      url.text.isEmpty) {\r\n                                    setState(() {\r\n                                      validateFailed =\r\n                                          'Please either choose an image or enter an image URL!';\r\n                                    });\r\n                                  } else if (filename.text.isNotEmpty &&\r\n                                      url.text.isNotEmpty) {\r\n                                    setState(() {\r\n                                      validateFailed =\r\n                                          'Please input either an image or an image URL, not both!';\r\n                                    });\r\n                                  } else if (filename.text.isNotEmpty &&\r\n                                      result?.files.single.bytes != null) {\r\n                                    var base64Data = base64\r\n                                        .encode(result!.files.single.bytes!);\r\n                                    var proceed = await widget\r\n                                            .htmlToolbarOptions\r\n                                            .mediaUploadInterceptor\r\n                                            ?.call(result!.files.single,\r\n                                                InsertFileType.image) ??\r\n                                        true;\r\n                                    if (proceed) {\r\n                                      widget.controller.insertHtml(\r\n                                          \"<img src='data:image/${result!.files.single.extension};base64,$base64Data' data-filename='${result!.files.single.name}'/>\");\r\n                                    }\r\n                                    Navigator.of(context).pop();\r\n                                  } else {\r\n                                    var proceed = await widget\r\n                                            .htmlToolbarOptions\r\n                                            .mediaLinkInsertInterceptor\r\n                                            ?.call(url.text,\r\n                                                InsertFileType.image) ??\r\n                                        true;\r\n                                    if (proceed) {\r\n                                      widget.controller\r\n                                          .insertNetworkImage(url.text);\r\n                                    }\r\n                                    Navigator.of(context).pop();\r\n                                  }\r\n                                },\r\n                                child: Text('OK'),\r\n                              )\r\n                            ],\r\n                          );\r\n                        }),\r\n                      );\r\n                    });\r\n              }\r\n            }\r\n            if (t.getIcons()[index].icon == Icons.audiotrack_outlined) {\r\n              var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                      ?.call(ButtonType.audio, null, null) ??\r\n                  true;\r\n              if (proceed) {\r\n                final filename = TextEditingController();\r\n                final url = TextEditingController();\r\n                final urlFocus = FocusNode();\r\n                FilePickerResult? result;\r\n                String? validateFailed;\r\n                await showDialog(\r\n                    context: context,\r\n                    builder: (BuildContext context) {\r\n                      return PointerInterceptor(\r\n                        child: StatefulBuilder(builder:\r\n                            (BuildContext context, StateSetter setState) {\r\n                          return AlertDialog(\r\n                            title: Text('Insert Audio'),\r\n                            scrollable: true,\r\n                            content: Column(\r\n                                mainAxisSize: MainAxisSize.min,\r\n                                crossAxisAlignment: CrossAxisAlignment.start,\r\n                                children: [\r\n                                  Text('Select from files',\r\n                                      style: TextStyle(\r\n                                          fontWeight: FontWeight.bold)),\r\n                                  SizedBox(height: 10),\r\n                                  TextFormField(\r\n                                      controller: filename,\r\n                                      readOnly: true,\r\n                                      decoration: InputDecoration(\r\n                                        prefixIcon: ElevatedButton(\r\n                                          style: ElevatedButton.styleFrom(\r\n                                              backgroundColor: Theme.of(context)\r\n                                                  .dialogBackgroundColor,\r\n                                              padding: EdgeInsets.only(\r\n                                                  left: 5, right: 5),\r\n                                              elevation: 0.0),\r\n                                          onPressed: () async {\r\n                                            result = await FilePicker.platform\r\n                                                .pickFiles(\r\n                                              type: FileType.audio,\r\n                                              withData: true,\r\n                                              allowedExtensions: widget\r\n                                                  .htmlToolbarOptions\r\n                                                  .audioExtensions,\r\n                                            );\r\n                                            if (result?.files.single.name !=\r\n                                                null) {\r\n                                              setState(() {\r\n                                                filename.text =\r\n                                                    result!.files.single.name;\r\n                                              });\r\n                                            }\r\n                                          },\r\n                                          child: Text('Choose audio',\r\n                                              style: TextStyle(\r\n                                                  color: Theme.of(context)\r\n                                                      .textTheme\r\n                                                      .bodyLarge\r\n                                                      ?.color)),\r\n                                        ),\r\n                                        suffixIcon: result != null\r\n                                            ? IconButton(\r\n                                                icon: Icon(Icons.close),\r\n                                                onPressed: () {\r\n                                                  setState(() {\r\n                                                    result = null;\r\n                                                    filename.text = '';\r\n                                                  });\r\n                                                })\r\n                                            : Container(height: 0, width: 0),\r\n                                        errorText: validateFailed,\r\n                                        errorMaxLines: 2,\r\n                                        border: InputBorder.none,\r\n                                      )),\r\n                                  SizedBox(height: 20),\r\n                                  Text('URL',\r\n                                      style: TextStyle(\r\n                                          fontWeight: FontWeight.bold)),\r\n                                  SizedBox(height: 10),\r\n                                  TextField(\r\n                                    controller: url,\r\n                                    focusNode: urlFocus,\r\n                                    textInputAction: TextInputAction.done,\r\n                                    decoration: InputDecoration(\r\n                                      border: OutlineInputBorder(),\r\n                                      hintText: 'URL',\r\n                                      errorText: validateFailed,\r\n                                      errorMaxLines: 2,\r\n                                    ),\r\n                                  ),\r\n                                ]),\r\n                            actions: [\r\n                              TextButton(\r\n                                onPressed: () {\r\n                                  Navigator.of(context).pop();\r\n                                },\r\n                                child: Text('Cancel'),\r\n                              ),\r\n                              TextButton(\r\n                                onPressed: () async {\r\n                                  if (filename.text.isEmpty &&\r\n                                      url.text.isEmpty) {\r\n                                    setState(() {\r\n                                      validateFailed =\r\n                                          'Please either choose an audio file or enter an audio file URL!';\r\n                                    });\r\n                                  } else if (filename.text.isNotEmpty &&\r\n                                      url.text.isNotEmpty) {\r\n                                    setState(() {\r\n                                      validateFailed =\r\n                                          'Please input either an audio file or an audio URL, not both!';\r\n                                    });\r\n                                  } else if (filename.text.isNotEmpty &&\r\n                                      result?.files.single.bytes != null) {\r\n                                    var base64Data = base64\r\n                                        .encode(result!.files.single.bytes!);\r\n                                    var proceed = await widget\r\n                                            .htmlToolbarOptions\r\n                                            .mediaUploadInterceptor\r\n                                            ?.call(result!.files.single,\r\n                                                InsertFileType.audio) ??\r\n                                        true;\r\n                                    if (proceed) {\r\n                                      widget.controller.insertHtml(\r\n                                          \"<audio controls src='data:audio/${result!.files.single.extension};base64,$base64Data' data-filename='${result!.files.single.name}'></audio>\");\r\n                                    }\r\n                                    Navigator.of(context).pop();\r\n                                  } else {\r\n                                    var proceed = await widget\r\n                                            .htmlToolbarOptions\r\n                                            .mediaLinkInsertInterceptor\r\n                                            ?.call(url.text,\r\n                                                InsertFileType.audio) ??\r\n                                        true;\r\n                                    if (proceed) {\r\n                                      widget.controller.insertHtml(\r\n                                          \"<audio controls src='${url.text}'></audio>\");\r\n                                    }\r\n                                    Navigator.of(context).pop();\r\n                                  }\r\n                                },\r\n                                child: Text('OK'),\r\n                              )\r\n                            ],\r\n                          );\r\n                        }),\r\n                      );\r\n                    });\r\n              }\r\n            }\r\n            if (t.getIcons()[index].icon == Icons.videocam_outlined) {\r\n              var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                      ?.call(ButtonType.video, null, null) ??\r\n                  true;\r\n              if (proceed) {\r\n                final filename = TextEditingController();\r\n                final url = TextEditingController();\r\n                final urlFocus = FocusNode();\r\n                FilePickerResult? result;\r\n                String? validateFailed;\r\n                await showDialog(\r\n                    context: context,\r\n                    builder: (BuildContext context) {\r\n                      return PointerInterceptor(\r\n                        child: StatefulBuilder(builder:\r\n                            (BuildContext context, StateSetter setState) {\r\n                          return AlertDialog(\r\n                            title: Text('Insert Video'),\r\n                            scrollable: true,\r\n                            content: Column(\r\n                                mainAxisSize: MainAxisSize.min,\r\n                                crossAxisAlignment: CrossAxisAlignment.start,\r\n                                children: [\r\n                                  Text('Select from files',\r\n                                      style: TextStyle(\r\n                                          fontWeight: FontWeight.bold)),\r\n                                  SizedBox(height: 10),\r\n                                  TextFormField(\r\n                                      controller: filename,\r\n                                      readOnly: true,\r\n                                      decoration: InputDecoration(\r\n                                        prefixIcon: ElevatedButton(\r\n                                          style: ElevatedButton.styleFrom(\r\n                                              backgroundColor: Theme.of(context)\r\n                                                  .dialogBackgroundColor,\r\n                                              padding: EdgeInsets.only(\r\n                                                  left: 5, right: 5),\r\n                                              elevation: 0.0),\r\n                                          onPressed: () async {\r\n                                            result = await FilePicker.platform\r\n                                                .pickFiles(\r\n                                              type: FileType.video,\r\n                                              withData: true,\r\n                                              allowedExtensions: widget\r\n                                                  .htmlToolbarOptions\r\n                                                  .videoExtensions,\r\n                                            );\r\n                                            if (result?.files.single.name !=\r\n                                                null) {\r\n                                              setState(() {\r\n                                                filename.text =\r\n                                                    result!.files.single.name;\r\n                                              });\r\n                                            }\r\n                                          },\r\n                                          child: Text('Choose video',\r\n                                              style: TextStyle(\r\n                                                  color: Theme.of(context)\r\n                                                      .textTheme\r\n                                                      .bodyLarge\r\n                                                      ?.color)),\r\n                                        ),\r\n                                        suffixIcon: result != null\r\n                                            ? IconButton(\r\n                                                icon: Icon(Icons.close),\r\n                                                onPressed: () {\r\n                                                  setState(() {\r\n                                                    result = null;\r\n                                                    filename.text = '';\r\n                                                  });\r\n                                                })\r\n                                            : Container(height: 0, width: 0),\r\n                                        errorText: validateFailed,\r\n                                        errorMaxLines: 2,\r\n                                        border: InputBorder.none,\r\n                                      )),\r\n                                  SizedBox(height: 20),\r\n                                  Text('URL',\r\n                                      style: TextStyle(\r\n                                          fontWeight: FontWeight.bold)),\r\n                                  SizedBox(height: 10),\r\n                                  TextField(\r\n                                    controller: url,\r\n                                    focusNode: urlFocus,\r\n                                    textInputAction: TextInputAction.done,\r\n                                    decoration: InputDecoration(\r\n                                      border: OutlineInputBorder(),\r\n                                      hintText: 'URL',\r\n                                      errorText: validateFailed,\r\n                                      errorMaxLines: 2,\r\n                                    ),\r\n                                  ),\r\n                                ]),\r\n                            actions: [\r\n                              TextButton(\r\n                                onPressed: () {\r\n                                  Navigator.of(context).pop();\r\n                                },\r\n                                child: Text('Cancel'),\r\n                              ),\r\n                              TextButton(\r\n                                onPressed: () async {\r\n                                  if (filename.text.isEmpty &&\r\n                                      url.text.isEmpty) {\r\n                                    setState(() {\r\n                                      validateFailed =\r\n                                          'Please either choose a video or enter a video URL!';\r\n                                    });\r\n                                  } else if (filename.text.isNotEmpty &&\r\n                                      url.text.isNotEmpty) {\r\n                                    setState(() {\r\n                                      validateFailed =\r\n                                          'Please input either a video or a video URL, not both!';\r\n                                    });\r\n                                  } else if (filename.text.isNotEmpty &&\r\n                                      result?.files.single.bytes != null) {\r\n                                    var base64Data = base64\r\n                                        .encode(result!.files.single.bytes!);\r\n                                    var proceed = await widget\r\n                                            .htmlToolbarOptions\r\n                                            .mediaUploadInterceptor\r\n                                            ?.call(result!.files.single,\r\n                                                InsertFileType.video) ??\r\n                                        true;\r\n                                    if (proceed) {\r\n                                      widget.controller.insertHtml(\r\n                                          \"<video controls src='data:video/${result!.files.single.extension};base64,$base64Data' data-filename='${result!.files.single.name}'></video>\");\r\n                                    }\r\n                                    Navigator.of(context).pop();\r\n                                  } else {\r\n                                    var proceed = await widget\r\n                                            .htmlToolbarOptions\r\n                                            .mediaLinkInsertInterceptor\r\n                                            ?.call(url.text,\r\n                                                InsertFileType.video) ??\r\n                                        true;\r\n                                    if (proceed) {\r\n                                      widget.controller.insertHtml(\r\n                                          \"<video controls src='${url.text}'></video>\");\r\n                                    }\r\n                                    Navigator.of(context).pop();\r\n                                  }\r\n                                },\r\n                                child: Text('OK'),\r\n                              )\r\n                            ],\r\n                          );\r\n                        }),\r\n                      );\r\n                    });\r\n              }\r\n            }\r\n            if (t.getIcons()[index].icon == Icons.attach_file) {\r\n              var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                      ?.call(ButtonType.otherFile, null, null) ??\r\n                  true;\r\n              if (proceed) {\r\n                final filename = TextEditingController();\r\n                final url = TextEditingController();\r\n                final urlFocus = FocusNode();\r\n                FilePickerResult? result;\r\n                String? validateFailed;\r\n                await showDialog(\r\n                    context: context,\r\n                    builder: (BuildContext context) {\r\n                      return PointerInterceptor(\r\n                        child: StatefulBuilder(builder:\r\n                            (BuildContext context, StateSetter setState) {\r\n                          return AlertDialog(\r\n                            title: Text('Insert File'),\r\n                            scrollable: true,\r\n                            content: Column(\r\n                                mainAxisSize: MainAxisSize.min,\r\n                                crossAxisAlignment: CrossAxisAlignment.start,\r\n                                children: [\r\n                                  Text('Select from files',\r\n                                      style: TextStyle(\r\n                                          fontWeight: FontWeight.bold)),\r\n                                  SizedBox(height: 10),\r\n                                  TextFormField(\r\n                                      controller: filename,\r\n                                      readOnly: true,\r\n                                      decoration: InputDecoration(\r\n                                        prefixIcon: ElevatedButton(\r\n                                          style: ElevatedButton.styleFrom(\r\n                                              backgroundColor: Theme.of(context)\r\n                                                  .dialogBackgroundColor,\r\n                                              padding: EdgeInsets.only(\r\n                                                  left: 5, right: 5),\r\n                                              elevation: 0.0),\r\n                                          onPressed: () async {\r\n                                            result = await FilePicker.platform\r\n                                                .pickFiles(\r\n                                              type: FileType.any,\r\n                                              withData: true,\r\n                                              allowedExtensions: widget\r\n                                                  .htmlToolbarOptions\r\n                                                  .otherFileExtensions,\r\n                                            );\r\n                                            if (result?.files.single.name !=\r\n                                                null) {\r\n                                              setState(() {\r\n                                                filename.text =\r\n                                                    result!.files.single.name;\r\n                                              });\r\n                                            }\r\n                                          },\r\n                                          child: Text('Choose file',\r\n                                              style: TextStyle(\r\n                                                  color: Theme.of(context)\r\n                                                      .textTheme\r\n                                                      .bodyLarge\r\n                                                      ?.color)),\r\n                                        ),\r\n                                        suffixIcon: result != null\r\n                                            ? IconButton(\r\n                                                icon: Icon(Icons.close),\r\n                                                onPressed: () {\r\n                                                  setState(() {\r\n                                                    result = null;\r\n                                                    filename.text = '';\r\n                                                  });\r\n                                                })\r\n                                            : Container(height: 0, width: 0),\r\n                                        errorText: validateFailed,\r\n                                        errorMaxLines: 2,\r\n                                        border: InputBorder.none,\r\n                                      )),\r\n                                  SizedBox(height: 20),\r\n                                  Text('URL',\r\n                                      style: TextStyle(\r\n                                          fontWeight: FontWeight.bold)),\r\n                                  SizedBox(height: 10),\r\n                                  TextField(\r\n                                    controller: url,\r\n                                    focusNode: urlFocus,\r\n                                    textInputAction: TextInputAction.done,\r\n                                    decoration: InputDecoration(\r\n                                      border: OutlineInputBorder(),\r\n                                      hintText: 'URL',\r\n                                      errorText: validateFailed,\r\n                                      errorMaxLines: 2,\r\n                                    ),\r\n                                  ),\r\n                                ]),\r\n                            actions: [\r\n                              TextButton(\r\n                                onPressed: () {\r\n                                  Navigator.of(context).pop();\r\n                                },\r\n                                child: Text('Cancel'),\r\n                              ),\r\n                              TextButton(\r\n                                onPressed: () {\r\n                                  if (filename.text.isEmpty &&\r\n                                      url.text.isEmpty) {\r\n                                    setState(() {\r\n                                      validateFailed =\r\n                                          'Please either choose a file or enter a file URL!';\r\n                                    });\r\n                                  } else if (filename.text.isNotEmpty &&\r\n                                      url.text.isNotEmpty) {\r\n                                    setState(() {\r\n                                      validateFailed =\r\n                                          'Please input either a file or a file URL, not both!';\r\n                                    });\r\n                                  } else if (filename.text.isNotEmpty &&\r\n                                      result?.files.single.bytes != null) {\r\n                                    widget.htmlToolbarOptions.onOtherFileUpload\r\n                                        ?.call(result!.files.single);\r\n                                    Navigator.of(context).pop();\r\n                                  } else {\r\n                                    widget.htmlToolbarOptions\r\n                                        .onOtherFileLinkInsert\r\n                                        ?.call(url.text);\r\n                                    Navigator.of(context).pop();\r\n                                  }\r\n                                },\r\n                                child: Text('OK'),\r\n                              )\r\n                            ],\r\n                          );\r\n                        }),\r\n                      );\r\n                    });\r\n              }\r\n            }\r\n            if (t.getIcons()[index].icon == Icons.table_chart_outlined) {\r\n              var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                      ?.call(ButtonType.table, null, null) ??\r\n                  true;\r\n              if (proceed) {\r\n                var currentRows = 1;\r\n                var currentCols = 1;\r\n                await showDialog(\r\n                    context: context,\r\n                    builder: (BuildContext context) {\r\n                      return PointerInterceptor(\r\n                        child: StatefulBuilder(builder:\r\n                            (BuildContext context, StateSetter setState) {\r\n                          return AlertDialog(\r\n                            title: Text('Insert Table'),\r\n                            scrollable: true,\r\n                            content: Row(\r\n                                mainAxisSize: MainAxisSize.min,\r\n                                mainAxisAlignment:\r\n                                    MainAxisAlignment.spaceAround,\r\n                                children: [\r\n                                  NumberPicker(\r\n                                    value: currentRows,\r\n                                    minValue: 1,\r\n                                    maxValue: 10,\r\n                                    onChanged: (value) =>\r\n                                        setState(() => currentRows = value),\r\n                                  ),\r\n                                  Text('x'),\r\n                                  NumberPicker(\r\n                                    value: currentCols,\r\n                                    minValue: 1,\r\n                                    maxValue: 10,\r\n                                    onChanged: (value) =>\r\n                                        setState(() => currentCols = value),\r\n                                  ),\r\n                                ]),\r\n                            actions: [\r\n                              TextButton(\r\n                                onPressed: () {\r\n                                  Navigator.of(context).pop();\r\n                                },\r\n                                child: Text('Cancel'),\r\n                              ),\r\n                              TextButton(\r\n                                onPressed: () async {\r\n                                  if (kIsWeb) {\r\n                                    widget.controller.insertTable(\r\n                                        '${currentRows}x$currentCols');\r\n                                  } else {\r\n                                    await widget.controller.editorController!\r\n                                        .evaluateJavascript(\r\n                                            source:\r\n                                                \"\\$('#summernote-2').summernote('insertTable', '${currentRows}x$currentCols');\");\r\n                                  }\r\n                                  Navigator.of(context).pop();\r\n                                },\r\n                                child: Text('OK'),\r\n                              )\r\n                            ],\r\n                          );\r\n                        }),\r\n                      );\r\n                    });\r\n              }\r\n            }\r\n            if (t.getIcons()[index].icon == Icons.horizontal_rule) {\r\n              var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                      ?.call(ButtonType.hr, null, null) ??\r\n                  true;\r\n              if (proceed) {\r\n                widget.controller.insertHtml('<hr/>');\r\n              }\r\n            }\r\n          },\r\n          isSelected: List<bool>.filled(t.getIcons().length, false),\r\n          children: t.getIcons(),\r\n        ));\r\n      }\r\n      if (t is OtherButtons) {\r\n        if (t.fullscreen || t.codeview || t.undo || t.redo || t.help) {\r\n          toolbarChildren.add(ToggleButtons(\r\n            constraints: BoxConstraints.tightFor(\r\n              width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            ),\r\n            color: widget.htmlToolbarOptions.buttonColor,\r\n            selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n            fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n            focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n            highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n            hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n            splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n            selectedBorderColor:\r\n                widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n            borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n            borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n            borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n            renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n            textStyle: widget.htmlToolbarOptions.textStyle,\r\n            onPressed: (int index) async {\r\n              void updateStatus() {\r\n                setState(mounted, this.setState, () {\r\n                  _miscSelected[index] = !_miscSelected[index];\r\n                });\r\n              }\r\n\r\n              if (t.getIcons1()[index].icon == Icons.fullscreen) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.fullscreen, _miscSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.setFullScreen();\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.code) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.codeview, _miscSelected[index],\r\n                            updateStatus) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.toggleCodeView();\r\n                  updateStatus();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.undo) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.undo, null, null) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.undo();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.redo) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.redo, null, null) ??\r\n                    true;\r\n                if (proceed) {\r\n                  widget.controller.redo();\r\n                }\r\n              }\r\n              if (t.getIcons1()[index].icon == Icons.help_outline) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.help, null, null) ??\r\n                    true;\r\n                if (proceed) {\r\n                  await showDialog(\r\n                      context: context,\r\n                      builder: (BuildContext context) {\r\n                        return PointerInterceptor(\r\n                          child: StatefulBuilder(builder:\r\n                              (BuildContext context, StateSetter setState) {\r\n                            return AlertDialog(\r\n                              title: Text('Help'),\r\n                              scrollable: true,\r\n                              content: Container(\r\n                                height: MediaQuery.of(context).size.height / 2,\r\n                                child: SingleChildScrollView(\r\n                                  child: DataTable(\r\n                                    columnSpacing: 5,\r\n                                    dataRowHeight: 75,\r\n                                    columns: const <DataColumn>[\r\n                                      DataColumn(\r\n                                        label: Text(\r\n                                          'Key Combination',\r\n                                          style: TextStyle(\r\n                                              fontStyle: FontStyle.italic),\r\n                                        ),\r\n                                      ),\r\n                                      DataColumn(\r\n                                        label: Text(\r\n                                          'Action',\r\n                                          style: TextStyle(\r\n                                              fontStyle: FontStyle.italic),\r\n                                        ),\r\n                                      ),\r\n                                    ],\r\n                                    rows: const <DataRow>[\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('ESC')),\r\n                                          DataCell(Text('Escape')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('ENTER')),\r\n                                          DataCell(Text('Insert Paragraph')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+Z')),\r\n                                          DataCell(\r\n                                              Text('Undo the last command')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+Z')),\r\n                                          DataCell(\r\n                                              Text('Undo the last command')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+Y')),\r\n                                          DataCell(\r\n                                              Text('Redo the last command')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('TAB')),\r\n                                          DataCell(Text('Tab')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('SHIFT+TAB')),\r\n                                          DataCell(Text('Untab')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+B')),\r\n                                          DataCell(Text('Set a bold style')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+I')),\r\n                                          DataCell(Text('Set an italic style')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+U')),\r\n                                          DataCell(\r\n                                              Text('Set an underline style')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+SHIFT+S')),\r\n                                          DataCell(Text(\r\n                                              'Set a strikethrough style')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+BACKSLASH')),\r\n                                          DataCell(Text('Clean a style')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+SHIFT+L')),\r\n                                          DataCell(Text('Set left align')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+SHIFT+E')),\r\n                                          DataCell(Text('Set center align')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+SHIFT+R')),\r\n                                          DataCell(Text('Set right align')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+SHIFT+J')),\r\n                                          DataCell(Text('Set full align')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+SHIFT+NUM7')),\r\n                                          DataCell(\r\n                                              Text('Toggle unordered list')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+SHIFT+NUM8')),\r\n                                          DataCell(Text('Toggle ordered list')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+LEFTBRACKET')),\r\n                                          DataCell(Text(\r\n                                              'Outdent on current paragraph')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+RIGHTBRACKET')),\r\n                                          DataCell(Text(\r\n                                              'Indent on current paragraph')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+NUM0')),\r\n                                          DataCell(Text(\r\n                                              'Change current block\\'s format as a paragraph (<p> tag)')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+NUM1')),\r\n                                          DataCell(Text(\r\n                                              'Change current block\\'s format as H1')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+NUM2')),\r\n                                          DataCell(Text(\r\n                                              'Change current block\\'s format as H2')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+NUM3')),\r\n                                          DataCell(Text(\r\n                                              'Change current block\\'s format as H3')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+NUM4')),\r\n                                          DataCell(Text(\r\n                                              'Change current block\\'s format as H4')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+NUM5')),\r\n                                          DataCell(Text(\r\n                                              'Change current block\\'s format as H5')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+NUM6')),\r\n                                          DataCell(Text(\r\n                                              'Change current block\\'s format as H6')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+ENTER')),\r\n                                          DataCell(\r\n                                              Text('Insert horizontal rule')),\r\n                                        ],\r\n                                      ),\r\n                                      DataRow(\r\n                                        cells: <DataCell>[\r\n                                          DataCell(Text('CTRL+K')),\r\n                                          DataCell(Text('Show link dialog')),\r\n                                        ],\r\n                                      ),\r\n                                    ],\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                              actions: [\r\n                                TextButton(\r\n                                  onPressed: () async {\r\n                                    Navigator.of(context).pop();\r\n                                  },\r\n                                  child: Text('Close'),\r\n                                )\r\n                              ],\r\n                            );\r\n                          }),\r\n                        );\r\n                      });\r\n                }\r\n              }\r\n            },\r\n            isSelected: _miscSelected,\r\n            children: t.getIcons1(),\r\n          ));\r\n        }\r\n        if (t.copy || t.paste) {\r\n          toolbarChildren.add(ToggleButtons(\r\n            constraints: BoxConstraints.tightFor(\r\n              width: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n              height: widget.htmlToolbarOptions.toolbarItemHeight - 2,\r\n            ),\r\n            color: widget.htmlToolbarOptions.buttonColor,\r\n            selectedColor: widget.htmlToolbarOptions.buttonSelectedColor,\r\n            fillColor: widget.htmlToolbarOptions.buttonFillColor,\r\n            focusColor: widget.htmlToolbarOptions.buttonFocusColor,\r\n            highlightColor: widget.htmlToolbarOptions.buttonHighlightColor,\r\n            hoverColor: widget.htmlToolbarOptions.buttonHoverColor,\r\n            splashColor: widget.htmlToolbarOptions.buttonSplashColor,\r\n            selectedBorderColor:\r\n                widget.htmlToolbarOptions.buttonSelectedBorderColor,\r\n            borderColor: widget.htmlToolbarOptions.buttonBorderColor,\r\n            borderRadius: widget.htmlToolbarOptions.buttonBorderRadius,\r\n            borderWidth: widget.htmlToolbarOptions.buttonBorderWidth,\r\n            renderBorder: widget.htmlToolbarOptions.renderBorder,\r\n            textStyle: widget.htmlToolbarOptions.textStyle,\r\n            onPressed: (int index) async {\r\n              if (t.getIcons2()[index].icon == Icons.copy) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.copy, null, null) ??\r\n                    true;\r\n                if (proceed) {\r\n                  var data = await widget.controller.getText();\r\n                  await Clipboard.setData(ClipboardData(text: data));\r\n                }\r\n              }\r\n              if (t.getIcons2()[index].icon == Icons.paste) {\r\n                var proceed = await widget.htmlToolbarOptions.onButtonPressed\r\n                        ?.call(ButtonType.paste, null, null) ??\r\n                    true;\r\n                if (proceed) {\r\n                  var data = await Clipboard.getData(Clipboard.kTextPlain);\r\n                  if (data != null) {\r\n                    var text = data.text!;\r\n                    widget.controller.insertHtml(text);\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            isSelected: List<bool>.filled(t.getIcons2().length, false),\r\n            children: t.getIcons2(),\r\n          ));\r\n        }\r\n      }\r\n    }\r\n    if (widget.htmlToolbarOptions.customToolbarInsertionIndices.isNotEmpty &&\r\n        widget.htmlToolbarOptions.customToolbarInsertionIndices.length ==\r\n            widget.htmlToolbarOptions.customToolbarButtons.length) {\r\n      for (var i = 0;\r\n          i < widget.htmlToolbarOptions.customToolbarInsertionIndices.length;\r\n          i++) {\r\n        if (widget.htmlToolbarOptions.customToolbarInsertionIndices[i] >\r\n            toolbarChildren.length) {\r\n          toolbarChildren.insert(toolbarChildren.length,\r\n              widget.htmlToolbarOptions.customToolbarButtons[i]);\r\n        } else if (widget.htmlToolbarOptions.customToolbarInsertionIndices[i] <\r\n            0) {\r\n          toolbarChildren.insert(\r\n              0, widget.htmlToolbarOptions.customToolbarButtons[i]);\r\n        } else {\r\n          toolbarChildren.insert(\r\n              widget.htmlToolbarOptions.customToolbarInsertionIndices[i],\r\n              widget.htmlToolbarOptions.customToolbarButtons[i]);\r\n        }\r\n      }\r\n    } else {\r\n      toolbarChildren.addAll(widget.htmlToolbarOptions.customToolbarButtons);\r\n    }\r\n    if (widget.htmlToolbarOptions.renderSeparatorWidget) {\r\n      toolbarChildren = intersperse(\r\n              widget.htmlToolbarOptions.separatorWidget, toolbarChildren)\r\n          .toList();\r\n    }\r\n    return toolbarChildren;\r\n  }\r\n}\r\n"
        }
    ]
}